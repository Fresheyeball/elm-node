var taskCB = function taskCB(merr, Task, Tuple0, f) {
    return Task.asyncFunction(function (callback) {
        return f(function (err) {
            return callback(err ? Task.error(merr(err.toString())) : Task.succeed(Tuple0));
        });
    });
};
var sanitize = function sanitize(record) {
    var spaces = Array.prototype.slice.call(arguments, 1);
    return spaces.reduce(function (r, space) {
        return (function () {
            r[space] ? void 0 : r[space] = {};
            return r[space];
        })();
    }, record);
};
var make = function make(localRuntime) {
    return function () {
        var fsø1 = require('fs');
        var Taskø1 = Elm.Native.Task.make(localRuntime);
        var Utilsø1 = Elm.Native.Utils.make(localRuntime);
        var Tuple0ø1 = (Utilsø1 || 0)['Tuple0'];
        var Tuple2ø1 = (Utilsø1 || 0)['Tuple2'];
        return (function () {
            sanitize(localRuntime, 'Native', 'FS');
            return localRuntime.Native.FS.values ? localRuntime.Native.FS.values : localRuntime.Native.FS.values = {
                'dirname': __dirname,
                'f_ok': (fsø1 || 0)['F_OK'],
                'r_ok': (fsø1 || 0)['R_OK'],
                'w_ok': (fsø1 || 0)['W_OK'],
                'x_ok': (fsø1 || 0)['X_OK'],
                'access': function (path) {
                    return Taskø1.asyncFunction(function (callback) {
                        return fsø1.access(path, function (err) {
                            return callback(Taskø1.succeed(err ? false : true));
                        });
                    });
                },
                'appendFile': F3(function (merr, path, data) {
                    return taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.appendFile(path, data, cb);
                    });
                }),
                'chmod': F3(function (merr, path, mode) {
                    return taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.chmod(path, mode, cb);
                    });
                }),
                'chown': F4(function (merr, path, uid, gid) {
                    return taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.chown(path, uid, gid, cb);
                    });
                }),
                'fchown': F4(function (merr, fd, uid, gid) {
                    return taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.fchown(fd, uid, gid, cb);
                    });
                }),
                'close': F2(function (merr, fd) {
                    return taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.close(fd, cb);
                    });
                }),
                'fchmod': F3(function (merr, fd, mode) {
                    return taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.fchmod(fd, mode, cb);
                    });
                }),
                'fstat': F2(function (merr, fd) {
                    return Taskø1.asyncFunction(function (callback) {
                        return fsø1.fstat(fd, function (err, stats) {
                            return callback(err ? Taskø1.fail(merr(err.toString())) : Taskø1.succeed(stats));
                        });
                    });
                }),
                'fsync': F2(function (merr, fd) {
                    return taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.fsync(fd, cb);
                    });
                }),
                'ftruncate': F3(function (merr, len, fd) {
                    return taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.ftruncate(fd, len, cb);
                    });
                }),
                'link': F3(function (merr, srcpath, dstpath) {
                    return taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.link(srcpath, dstpath, cb);
                    });
                }),
                'mkdir': F3(function (merr, path, mode) {
                    return taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.mkdir(path, mode, cb);
                    });
                }),
                'readFile': F3(function (merr, options, path) {
                    return Taskø1.asyncFunction(function (callback) {
                        return fsø1.readFile(path, options, function (err, data) {
                            return callback(err ? Taskø1.fail(merr(err.toString())) : Taskø1.succeed(data));
                        });
                    });
                }),
                'open': F4(function (merr, path, flags, mode) {
                    return Taskø1.asyncFunction(function (callback) {
                        return fsø1.open(path, flags, mode, function (err, fd) {
                            return callback(err ? Taskø1.fail(merr(err.toString())) : Taskø1.succeed(fd));
                        });
                    });
                }),
                'read': F6(function (merr, fd, buffer, offset, length, position) {
                    return Taskø1.asyncFunction(function (callback) {
                        return fsø1.read(fd, buffer, offset, length, position, function (err, bytesRead, buffer_) {
                            return callback(err ? Taskø1.fail(merr(err.toString())) : Taskø1.succeed(Tuple2ø1(bytesRead, buffer_)));
                        });
                    });
                }),
                'readdir': F2(function (merr, path) {
                    return Taskø1.asyncFunction(function (callback) {
                        return fsø1.readdir(path, function (err, files) {
                            return callback(err ? Taskø1.fail(merr(err.toString())) : Taskø1.succeed(files));
                        });
                    });
                }),
                'readlink': F2(function (merr, path) {
                    return Taskø1.asyncFunction(function (callback) {
                        return fsø1.readlink(path, function (err, linkString) {
                            return callback(err ? Taskø1.fail(merr(err.toString())) : Taskø1.succeed(linkString));
                        });
                    });
                }),
                'rename': F3(function (merr, oldPath, newPath) {
                    return taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.rename(oldPath, newPath, cb);
                    });
                }),
                'rmdir': F2(function (merr, path) {
                    return taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.rmdir(path, cb);
                    });
                }),
                'stat': F2(function (merr, path) {
                    return Taskø1.asyncFunction(function (callback) {
                        return fsø1.stat(path, function (err, stats) {
                            return callback(err ? Taskø1.fail(merr(err.toString())) : Taskø1.succeed(stats));
                        });
                    });
                }),
                'symlink': F4(function (merr, destination, path, type) {
                    return taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.symlink(destination, path, type, cb);
                    });
                }),
                'truncate': F3(function (merr, path, len) {
                    return taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.truncate(path, len, cb);
                    });
                }),
                'unlink': F2(function (merr, path) {
                    return taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.unlink(path, cb);
                    });
                }),
                'watch': F3(function (path, options, handler) {
                    return Taskø1.asyncFunction(function (callback) {
                        return (function () {
                            fsø1.watch(path, options, function (event, filename) {
                                return Taskø1.perform(handler(Tuple2ø1(event, filename)));
                            });
                            return callback(Taskø1.succeed(Tuple0ø1));
                        })();
                    });
                }),
                'writeFile': F4(function (merr, file, data, options) {
                    return Taskø1.asyncFunction(function (callback) {
                        return fsø1.writeFile(file, data, function (err) {
                            return callback(err ? Taskø1.error(merr(err.toString())) : Taskø1.succeed(Tuple0ø1));
                        });
                    });
                })
            };
        })();
    }.call(this);
};
sanitize(Elm, 'Native', 'FS');
Elm.Native.FS.make = make;
//# sourceMappingURL=data:application/json;base64,
