var taskCB = function taskCB(Task, Tuple0, f) {
    return Task.asyncFunction(function (callback) {
        return f(function (err) {
            return callback(err ? Task.error(err) : Task.success(Tuple0));
        });
    });
};
var access = function access(fs, Task) {
    return function (path) {
        return Task.asyncFunction(function (callback) {
            return fs.access(path, function (err) {
                return callback(Task.succeed(err ? false : true));
            });
        });
    };
};
var appendFile = function appendFile(fs, Task, Tuple0) {
    return function (path, data) {
        return taskCB(Task, Tuple0, function (cb) {
            return fs.appendFile(path, data, cb);
        });
    };
};
var chmod = function chmod(fs, Task, Tuple0) {
    return function (path) {
        return taskCB(Task, Tuple0, function (cb) {
            return fs.chmod(path, cb);
        });
    };
};
var chown = function chown(fs, Task, Tuple0) {
    return function (path, uid, gid) {
        return taskCB(Task, Tuple0, function (cb) {
            return fs.chown(path, uid, gid, cb);
        });
    };
};
var readFile = function readFile(fs, Task) {
    return function (path) {
        return Task.asyncFunction(function (callback) {
            return fs.readFile(path, 'utf8', function (err, data) {
                return callback(err ? Task.fail(err) : Task.succeed(data));
            });
        });
    };
};
var sanitize = function sanitize(record) {
    var spaces = Array.prototype.slice.call(arguments, 1);
    return spaces.reduce(function (r, space) {
        return (function () {
            r[space] ? void 0 : r[space] = {};
            return r[space];
        })();
    }, record);
};
var make = function make(localRuntime) {
    return function () {
        var fsø1 = require('fs');
        var Taskø1 = Elm.Native.Task.make(localRuntime);
        var Utilsø1 = Elm.Native.Utils.make(localRuntime);
        var Tuple0ø1 = (Utilsø1 || 0)['Tuple0'];
        return (function () {
            sanitize(localRuntime, 'Native', 'FS');
            return localRuntime.Native.FS.values ? localRuntime.Native.FS.values : localRuntime.Native.FS.values = {
                'access': access(fsø1, Taskø1),
                'appendFile': F2(appendFile(fsø1, Taskø1, Tuple0ø1)),
                'chmod': chmod(fsø1, Taskø1, Tuple0ø1),
                'chown': chown(fsø1, Taskø1, Tuple0ø1)
            };
        })();
    }.call(this);
};
sanitize(Elm, 'Native', 'FS');
Elm.Native.FS.make = make;
//# sourceMappingURL=data:application/json;base64,
