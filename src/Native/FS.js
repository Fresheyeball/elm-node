var taskCB = function taskCB(merr, Task, Tuple0, f) {
    return Task.asyncFunction(function (callback) {
        return f(function (err) {
            return callback(err ? Task.error(merr(err.toString())) : Task.succeed(Tuple0));
        });
    });
};
var access = function access(fs, Task) {
    return function (path) {
        return Task.asyncFunction(function (callback) {
            return fs.access(path, function (err) {
                return callback(Task.succeed(err ? false : true));
            });
        });
    };
};
var appendFile = function appendFile(fs, Task, Tuple0) {
    return function (merr, path, data) {
        return taskCB(merr, Task, Tuple0, function (cb) {
            return fs.appendFile(path, data, cb);
        });
    };
};
var chmod = function chmod(fs, Task, Tuple0) {
    return function (merr, path, mode) {
        return taskCB(merr, Task, Tuple0, function (cb) {
            return fs.chmod(path, mode, cb);
        });
    };
};
var chown = function chown(fs, Task, Tuple0) {
    return function (merr, path, uid, gid) {
        return taskCB(merr, Task, Tuple0, function (cb) {
            return fs.chown(path, uid, gid, cb);
        });
    };
};
var close = function close(fs, Task, Tuple0) {
    return function (merr, fd) {
        return taskCB(merr, Task, Tuple0, function (cb) {
            return fs.close(fd, cb);
        });
    };
};
var fchmod = function fchmod(fs, Task, Tuple0) {
    return function (merr, fd, mode) {
        return taskCB(merr, Task, Tuple0, function (cb) {
            return fs.fchmod(fd, mode, cb);
        });
    };
};
var fstat = function fstat(fs, Task) {
    return function (merr, fd) {
        return Task.asyncFunction(function (callback) {
            return fs.fstat(fd, function (err, stats) {
                return callback(err ? Task.fail(merr(err.toString())) : Task.succeed(stats));
            });
        });
    };
};
var fsync = function fsync(fs, Task, Tuple0) {
    return function (merr, fd) {
        return taskCB(merr, Task, Tuple0, function (cb) {
            return fs.fsync(fd, cb);
        });
    };
};
var ftruncate = function ftruncate(fs, Task, Tuple0) {
    return function (merr, len, fd) {
        return taskCB(merr, Task, Tuple0, function (cb) {
            return fs.ftruncate(fd, len, cb);
        });
    };
};
var link = function link(fs, Task, Tuple0) {
    return function (merr, srcpath, dstpath) {
        return taskCB(merr, Task, Tuple0, function (cb) {
            return fs.link(srcpath, dstpath, cb);
        });
    };
};
var mkdir = function mkdir(fs, Task, Tuple0) {
    return function (merr, path, mode) {
        return taskCB(merr, Task, Tuple0, function (cb) {
            return fs.mkdir(path, mode, cb);
        });
    };
};
var open = function open(fs, Task) {
    return function (merr, path, flags, mode) {
        return Task.asyncFunction(function (callback) {
            return fs.open(path, flags, mode, function (err, fd) {
                return callback(err ? Task.fail(merr(err.toString())) : Task.succeed(fd));
            });
        });
    };
};
var read = exports.read = function read(fs, Task, Tuple2) {
    return function (merr, fd, buffer, offset, length, position) {
        return Task.asyncFunction(function (callback) {
            return fs.read(fd, buffer, offset, length, position, function (err, bytesRead, buffer_) {
                return callback(err ? Task.fail(merr(err.toString())) : Task.succeed(Tuple2(bytesRead, buffer_)));
            });
        });
    };
};
var readdir = function readdir(fs, Task) {
    return function (merr, path) {
        return Task.asyncFunction(function (callback) {
            return fs.readdir(path, function (err, files) {
                return callback(err ? Task.fail(merr(err.toString())) : Task.succeed(files));
            });
        });
    };
};
var readlink = function readlink(fs, Task) {
    return function (merr, path) {
        return Task.asyncFunction(function (callback) {
            return fs.readlink(path, function (err, linkString) {
                return callback(err ? Task.fail(merr(err.toString())) : Task.succeed(linkString));
            });
        });
    };
};
var rename = function rename(fs, Task, Tuple0) {
    return function (merr, oldPath, newPath) {
        return taskCB(merr, Task, Tuple0, function (cb) {
            return fs.rename(oldPath, newPath, cb);
        });
    };
};
var rmdir = function rmdir(fs, Task, Tuple0) {
    return function (merr, path) {
        return taskCB(merr, Task, Tuple0, function (cb) {
            return fs.rmdir(path, cb);
        });
    };
};
var stat = function stat(fs, Task) {
    return function (merr, path) {
        return Task.asyncFunction(function (callback) {
            return fs.stat(path, function (err, stats) {
                return callback(err ? Task.fail(merr(err.toString())) : Task.succeed(stats));
            });
        });
    };
};
var symlink = function symlink(fs, Task, Tuple0) {
    return function (merr, destination, path, type) {
        return taskCB(merr, Task, Tuple0, function (cb) {
            return fs.symlink(destination, path, type, cb);
        });
    };
};
var truncate = function truncate(fs, Task, Tuple0) {
    return function (merr, path, len) {
        return taskCB(merr, Task, Tuple0, function (cb) {
            return fs.truncate(path, len, cb);
        });
    };
};
var unlink = function unlink(fs, Task, Tuple0) {
    return function (merr, path) {
        return taskCB(merr, Task, Tuple0, function (cb) {
            return fs.unlink(path, cb);
        });
    };
};
var watch = function watch(fs, Task, Tuple0, Tuple2) {
    return function (path, options, handler) {
        return (function () {
            fs.watch(path, options, function (event, filename) {
                return Task.perform(handler(Tuple2(event, filename)));
            });
            return Task.succeed(Tuple0);
        })();
    };
};
var sanitize = function sanitize(record) {
    var spaces = Array.prototype.slice.call(arguments, 1);
    return spaces.reduce(function (r, space) {
        return (function () {
            r[space] ? void 0 : r[space] = {};
            return r[space];
        })();
    }, record);
};
var make = function make(localRuntime) {
    return function () {
        var fsø1 = require('fs');
        var Taskø1 = Elm.Native.Task.make(localRuntime);
        var Utilsø1 = Elm.Native.Utils.make(localRuntime);
        var Tuple0ø1 = (Utilsø1 || 0)['Tuple0'];
        var Tuple2ø1 = (Utilsø1 || 0)['Tuple2'];
        return (function () {
            sanitize(localRuntime, 'Native', 'FS');
            return localRuntime.Native.FS.values ? localRuntime.Native.FS.values : localRuntime.Native.FS.values = {
                'access': access(fsø1, Taskø1),
                'appendFile': F3(appendFile(fsø1, Taskø1, Tuple0ø1)),
                'chmod': F3(chmod(fsø1, Taskø1, Tuple0ø1)),
                'chown': F4(chown(fsø1, Taskø1, Tuple0ø1)),
                'close': F2(close(fsø1, Taskø1, Tuple0ø1)),
                'fchmod': F3(fchmod(fsø1, Taskø1, Tuple0ø1)),
                'fchown': F4(function (merr, fd, uid, gid) {
                    return taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.fchown(fd, uid, gid, cb);
                    });
                }),
                'fstat': F2(fstat(fsø1, Taskø1)),
                'fsync': F2(fsync(fsø1, Taskø1, Tuple0ø1)),
                'ftruncate': F3(ftruncate(fsø1, Taskø1, Tuple0ø1)),
                'link': F3(link(fsø1, Taskø1, Tuple0ø1)),
                'mkdir': F3(mkdir(fsø1, Taskø1, Tuple0ø1)),
                'open': F4(open(fsø1, Taskø1)),
                'read': F6(read(fsø1, Taskø1, Tuple2ø1)),
                'readFile': F3(function (merr, options, path) {
                    return Taskø1.asyncFunction(function (callback) {
                        return fsø1.readFile(path, options, function (err, data) {
                            return callback(err ? Taskø1.fail(merr(err.toString())) : Taskø1.succeed(data));
                        });
                    });
                }),
                'readdir': F2(readdir(fsø1, Taskø1)),
                'readlink': F2(readlink(fsø1, Taskø1)),
                'rename': F3(rename(fsø1, Taskø1, Tuple0ø1)),
                'rmdir': F2(rmdir(fsø1, Taskø1, Tuple0ø1)),
                'stat': F2(stat(fsø1, Taskø1)),
                'symlink': F4(symlink(fsø1, Taskø1, Tuple0ø1)),
                'truncate': F3(truncate(fsø1, Taskø1, Tuple0ø1)),
                'unlink': F2(unlink(fsø1, Taskø1, Tuple0ø1)),
                'watch': F3(watch(fsø1, Taskø1, Tuple0ø1, Tuple2ø1)),
                'dirname': __dirname,
                'writeFile': F4(function (merr, file, data, options) {
                    return Taskø1.asyncFunction(function (callback) {
                        return fsø1.writeFile(file, data, function (err) {
                            return callback(err ? Taskø1.error(merr(err.toString())) : Taskø1.succeed(Tuple0ø1));
                        });
                    });
                })
            };
        })();
    }.call(this);
};
sanitize(Elm, 'Native', 'FS');
Elm.Native.FS.make = make;
//# sourceMappingURL=data:application/json;base64,
