var marshallStat = function marshallStat(stat) {
    return (function () {
        stat.atime = stat.atime.getTime();
        stat.mtime = stat.mtime.getTime();
        stat.ctime = stat.ctime.getTime();
        stat.birthtime = stat.birthtime.getTime();
        return stat;
    })();
};
var make = function make(localRuntime) {
    return function () {
        var fsø1 = require('fs');
        var Taskø1 = Elm.Native.Task.make(localRuntime);
        var Utilsø1 = Elm.Native.Utils.make(localRuntime);
        var Tuple0ø1 = (Utilsø1 || 0)['Tuple0'];
        var Tuple2ø1 = (Utilsø1 || 0)['Tuple2'];
        return (function () {
            sanitize(localRuntime, 'Native', 'FS');
            return localRuntime.Native.FS.values ? localRuntime.Native.FS.values : localRuntime.Native.FS.values = {
                'dirname': __dirname,
                'f_ok': (fsø1 || 0)['F_OK'],
                'r_ok': (fsø1 || 0)['R_OK'],
                'w_ok': (fsø1 || 0)['W_OK'],
                'x_ok': (fsø1 || 0)['X_OK'],
                'access': function (path) {
                    return Taskø1.asyncFunction(function (callback) {
                        return fsø1.access(path, function (err) {
                            return callback(Taskø1.succeed(err ? false : true));
                        });
                    });
                },
                'appendFile': F3(function (merr, path, data) {
                    return oo.taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.appendFile(path, data, cb);
                    });
                }),
                'chmod': F3(function (merr, path, mode) {
                    return oo.taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.chmod(path, mode, cb);
                    });
                }),
                'chown': F4(function (merr, path, uid, gid) {
                    return oo.taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.chown(path, uid, gid, cb);
                    });
                }),
                'fchown': F4(function (merr, fd, uid, gid) {
                    return oo.taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.fchown(fd, uid, gid, cb);
                    });
                }),
                'close': F2(function (merr, fd) {
                    return oo.taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.close(fd, cb);
                    });
                }),
                'fchmod': F3(function (merr, fd, mode) {
                    return oo.taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.fchmod(fd, mode, cb);
                    });
                }),
                'fstat': F2(function (merr, fd) {
                    return Taskø1.asyncFunction(function (callback) {
                        return fsø1.fstat(fd, function (err, stats) {
                            return callback(err ? Taskø1.fail(merr(err.toString())) : Taskø1.succeed(marshallStat(stats)));
                        });
                    });
                }),
                'fsync': F2(function (merr, fd) {
                    return oo.taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.fsync(fd, cb);
                    });
                }),
                'ftruncate': F3(function (merr, len, fd) {
                    return oo.taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.ftruncate(fd, len, cb);
                    });
                }),
                'link': F3(function (merr, srcpath, dstpath) {
                    return oo.taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.link(srcpath, dstpath, cb);
                    });
                }),
                'mkdir': F3(function (merr, path, mode) {
                    return oo.taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.mkdir(path, mode, cb);
                    });
                }),
                'readFile': F3(function (merr, options, path) {
                    return Taskø1.asyncFunction(function (callback) {
                        return fsø1.readFile(path, options, function (err, data) {
                            return callback(err ? Taskø1.fail(merr(err.toString())) : Taskø1.succeed(data));
                        });
                    });
                }),
                'open': F4(function (merr, path, flags, mode) {
                    return Taskø1.asyncFunction(function (callback) {
                        return fsø1.open(path, flags, mode, function (err, fd) {
                            return callback(err ? Taskø1.fail(merr(err.toString())) : Taskø1.succeed(fd));
                        });
                    });
                }),
                'read': F6(function (merr, fd, buffer, offset, length, position) {
                    return Taskø1.asyncFunction(function (callback) {
                        return fsø1.read(fd, buffer, offset, length, position, function (err, bytesRead, buffer_) {
                            return callback(err ? Taskø1.fail(merr(err.toString())) : Taskø1.succeed(Tuple2ø1(bytesRead, buffer_)));
                        });
                    });
                }),
                'readdir': F2(function (merr, path) {
                    return Taskø1.asyncFunction(function (callback) {
                        return fsø1.readdir(path, function (err, files) {
                            return callback(err ? Taskø1.fail(merr(err.toString())) : Taskø1.succeed(files));
                        });
                    });
                }),
                'readlink': F2(function (merr, path) {
                    return Taskø1.asyncFunction(function (callback) {
                        return fsø1.readlink(path, function (err, linkString) {
                            return callback(err ? Taskø1.fail(merr(err.toString())) : Taskø1.succeed(linkString));
                        });
                    });
                }),
                'rename': F3(function (merr, oldPath, newPath) {
                    return oo.taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.rename(oldPath, newPath, cb);
                    });
                }),
                'rmdir': F2(function (merr, path) {
                    return oo.taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.rmdir(path, cb);
                    });
                }),
                'stat': F2(function (merr, path) {
                    return Taskø1.asyncFunction(function (callback) {
                        return fsø1.stat(path, function (err, stats) {
                            return callback(err ? Taskø1.fail(merr(err.toString())) : Taskø1.succeed(marshallStat(stats)));
                        });
                    });
                }),
                'symlink': F4(function (merr, destination, path, type) {
                    return oo.taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.symlink(destination, path, type, cb);
                    });
                }),
                'truncate': F3(function (merr, path, len) {
                    return oo.taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.truncate(path, len, cb);
                    });
                }),
                'unlink': F2(function (merr, path) {
                    return oo.taskCB(merr, Taskø1, Tuple0ø1, function (cb) {
                        return fsø1.unlink(path, cb);
                    });
                }),
                'watch': F3(function (path, options, handler) {
                    return Taskø1.asyncFunction(function (callback) {
                        return (function () {
                            fsø1.watch(path, options, function (event, filename) {
                                return Taskø1.perform(handler(Tuple2ø1(event, filename)));
                            });
                            return callback(Taskø1.succeed(Tuple0ø1));
                        })();
                    });
                }),
                'watchFile': F3(function (options, path, handler) {
                    return function () {
                        var handler_ø1 = function (curr, prev) {
                            return Taskø1.perform(handler(Tuple2ø1(marshallStat(curr), marshallStat(prev))));
                        };
                        return Taskø1.asyncFunction(function (callback) {
                            return (function () {
                                fsø1.watchFile(path, options, handler_ø1);
                                return callback(Taskø1.succeed(Taskø1.asyncFunction(function (callback_) {
                                    return (function () {
                                        fsø1.unwatchFile(path, handler_ø1);
                                        return callback_(Taskø1.succeed(Tuple0ø1));
                                    })();
                                })));
                            })();
                        });
                    }.call(this);
                }),
                'writeFile': F4(function (merr, file, data, options) {
                    return Taskø1.asyncFunction(function (callback) {
                        return fsø1.writeFile(file, data, function (err) {
                            return callback(err ? Taskø1.error(merr(err.toString())) : Taskø1.succeed(Tuple0ø1));
                        });
                    });
                })
            };
        })();
    }.call(this);
};
sanitize(Elm, 'Native', 'FS');
Elm.Native.FS.make = make;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFub255bW91cy53aXNwIl0sIm5hbWVzIjpbIm1hcnNoYWxsU3RhdCIsInN0YXQiLCJhdGltZSIsImdldFRpbWUiLCJtdGltZSIsImN0aW1lIiwiYmlydGh0aW1lIiwibWFrZSIsImxvY2FsUnVudGltZSIsImZzw7gxIiwicmVxdWlyZSIsIlRhc2vDuDEiLCJFbG0iLCJOYXRpdmUuVGFzay5tYWtlIiwiVXRpbHPDuDEiLCJOYXRpdmUuVXRpbHMubWFrZSIsIlR1cGxlMMO4MSIsIlR1cGxlMsO4MSIsInNhbml0aXplIiwiTmF0aXZlLkZTLnZhbHVlcyIsIl9fZGlybmFtZSIsInBhdGgiLCJhc3luY0Z1bmN0aW9uIiwiY2FsbGJhY2siLCJhY2Nlc3MiLCJlcnIiLCJzdWNjZWVkIiwiRjMiLCJtZXJyIiwiZGF0YSIsIm9vIiwidGFza0NCIiwiY2IiLCJhcHBlbmRGaWxlIiwibW9kZSIsImNobW9kIiwiRjQiLCJ1aWQiLCJnaWQiLCJjaG93biIsImZkIiwiZmNob3duIiwiRjIiLCJjbG9zZSIsImZjaG1vZCIsImZzdGF0Iiwic3RhdHMiLCJmYWlsIiwidG9TdHJpbmciLCJmc3luYyIsImxlbiIsImZ0cnVuY2F0ZSIsInNyY3BhdGgiLCJkc3RwYXRoIiwibGluayIsIm1rZGlyIiwib3B0aW9ucyIsInJlYWRGaWxlIiwiZmxhZ3MiLCJvcGVuIiwiRjYiLCJidWZmZXIiLCJvZmZzZXQiLCJsZW5ndGgiLCJwb3NpdGlvbiIsInJlYWQiLCJieXRlc1JlYWQiLCJidWZmZXJfIiwicmVhZGRpciIsImZpbGVzIiwicmVhZGxpbmsiLCJsaW5rU3RyaW5nIiwib2xkUGF0aCIsIm5ld1BhdGgiLCJyZW5hbWUiLCJybWRpciIsImRlc3RpbmF0aW9uIiwidHlwZSIsInN5bWxpbmsiLCJ0cnVuY2F0ZSIsInVubGluayIsImhhbmRsZXIiLCJ3YXRjaCIsImV2ZW50IiwiZmlsZW5hbWUiLCJwZXJmb3JtIiwiaGFuZGxlcl/DuDEiLCJjdXJyIiwicHJldiIsIndhdGNoRmlsZSIsImNhbGxiYWNrXyIsInVud2F0Y2hGaWxlIiwiZmlsZSIsIndyaXRlRmlsZSIsImVycm9yIiwiTmF0aXZlLkZTLm1ha2UiXSwibWFwcGluZ3MiOiJBQUFBLElBQU9BLFlBQUEsR0FBUCxTQUFPQSxZQUFQLENBQXFCQyxJQUFyQixFQUEyQjtBQUFBLFcsYUFDekI7QUFBQSxRQUFNQSxJQUFBLENBQUtDLEtBQVgsR0FBK0JELElBQUEsQ0FBS0MsS0FBZCxDQUFDQyxPQUFGLEVBQXJCO0FBQUEsUUFDTUYsSUFBQSxDQUFLRyxLQUFYLEdBQStCSCxJQUFBLENBQUtHLEtBQWQsQ0FBQ0QsT0FBRixFQUFyQixDQURBO0FBQUEsUUFFTUYsSUFBQSxDQUFLSSxLQUFYLEdBQStCSixJQUFBLENBQUtJLEtBQWQsQ0FBQ0YsT0FBRixFQUFyQixDQUZBO0FBQUEsUUFHTUYsSUFBQSxDQUFLSyxTQUFYLEdBQStCTCxJQUFBLENBQUtLLFNBQWQsQ0FBQ0gsT0FBRixFQUFyQixDQUhBO0FBQUEsUUFJQSxPQUFBRixJQUFBLENBSkE7QUFBQSxLLENBQUEsRUFEeUI7QUFBQSxDQUEzQjtBQU9BLElBQU9NLElBQUEsR0FBUCxTQUFPQSxJQUFQLENBQ0dDLFlBREgsRUFDaUI7QUFBQSxXLFlBQ2Q7QUFBQSxZQUFBQyxJLEdBQVFDLE9BQUQsQ0FBUyxJQUFULENBQVA7QUFBQSxRQUNBLElBQUFDLE0sR0FBUUMsR0FBQSxDQUFJQyxnQkFBTCxDQUF3QkwsWUFBeEIsQ0FBUCxDQURBO0FBQUEsUUFFQSxJQUFBTSxPLEdBQVFGLEdBQUEsQ0FBSUcsaUJBQUwsQ0FBd0JQLFlBQXhCLENBQVAsQ0FGQTtBQUFBLFFBR0EsSUFBQVEsUSxJQUFnQkYsTyxNQUFULEMsUUFBQSxDQUFQLENBSEE7QUFBQSxRQUlBLElBQUFHLFEsSUFBZ0JILE8sTUFBVCxDLFFBQUEsQ0FBUCxDQUpBO0FBQUEsUUFLRCxPLGFBQ0U7QUFBQSxZQUFDSSxRQUFELENBQVVWLFlBQVYsRSxRQUFBLEUsSUFBQTtBQUFBLFlBQ0EsT0FBSUEsWUFBQSxDQUFhVyxnQkFBakIs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QSxxQyxDQUFBLEVBRDREO0FBQUEsaUNBQXJDLENBQWYsQ0FBVixFQURBO0FBQUEsNkIsQ0FBQSxFQURrQztBQUFBLHlCQUFwQyxFQUpDO0FBQUEscUIsS0FESCxDLElBQUE7QUFBQSxpQkFEUyxDQS9KK0I7QUFBQSxnQixhQStLOUJvQixFQUFELENBQUksVUFBS1IsSUFBTCxFQUFVZ0UsSUFBVixFQUFlL0QsSUFBZixFQUFvQjJCLE9BQXBCLEVBQ2I7QUFBQSwyQkFBZ0I3QyxNQUFmLENBQUNXLGFBQUYsQ0FBcUIsVUFBS0MsUUFBTCxFQUNuQjtBQUFBLCtCQUFZZCxJQUFYLENBQUNvRixTQUFGLENBQWVELElBQWYsRUFBb0IvRCxJQUFwQixFQUF5QixVQUFLSixHQUFMLEVBQ3ZCO0FBQUEsbUNBQUNGLFFBQUQsQ0FBY0UsR0FBSixHQUNBZCxNQUFQLENBQUNtRixLQUFGLENBQWNsRSxJQUFELENBQWlCSCxHQUFWLENBQUN1QixRQUFGLEVBQU4sQ0FBYixDQURRLEdBRUVyQyxNQUFULENBQUNlLE9BQUYsQ0FBZVYsUUFBZixDQUZGO0FBQUEseUJBREY7QUFBQSxxQkFERjtBQUFBLGlCQURTLENBL0srQjtBQUFBLGFBRnhDLENBREE7QUFBQSxTLENBQUEsRUFERixDQUxDO0FBQUEsSyxLQURjLEMsSUFBQTtBQUFBLENBRGpCLENBUEE7QUEwTUNFLFFBQUQsQ0FBVU4sR0FBVixFLFFBQUEsRSxJQUFBLEVBMU1BO0FBMk1NQSxHQUFBLENBQUltRixjQUFWLEdBQXlCeEYsSUFBekIiLCJzb3VyY2VzQ29udGVudCI6WyIoZGVmbi0gbWFyc2hhbGxTdGF0IFtzdGF0XSAoZG9cbiAgKHNldCEgc3RhdC5hdGltZSAgICAgKC5nZXRUaW1lIHN0YXQuYXRpbWUpKVxuICAoc2V0ISBzdGF0Lm10aW1lICAgICAoLmdldFRpbWUgc3RhdC5tdGltZSkpXG4gIChzZXQhIHN0YXQuY3RpbWUgICAgICguZ2V0VGltZSBzdGF0LmN0aW1lKSlcbiAgKHNldCEgc3RhdC5iaXJ0aHRpbWUgKC5nZXRUaW1lIHN0YXQuYmlydGh0aW1lKSlcbiAgc3RhdCkpXG5cbihkZWZuLSBtYWtlXG4gIFtsb2NhbFJ1bnRpbWVdIChsZXRcbiAgW2ZzICAgICAocmVxdWlyZSBcImZzXCIpXG4gICBUYXNrICAgKEVsbS5OYXRpdmUuVGFzay5tYWtlICAgbG9jYWxSdW50aW1lKVxuICAgVXRpbHMgIChFbG0uTmF0aXZlLlV0aWxzLm1ha2UgIGxvY2FsUnVudGltZSlcbiAgIFR1cGxlMCAoOlR1cGxlMCBVdGlscylcbiAgIFR1cGxlMiAoOlR1cGxlMiBVdGlscyldXG4gIChkb1xuICAgIChzYW5pdGl6ZSBsb2NhbFJ1bnRpbWUgOk5hdGl2ZSA6RlMpXG4gICAgKGlmIGxvY2FsUnVudGltZS5OYXRpdmUuRlMudmFsdWVzXG4gICAgICAgIGxvY2FsUnVudGltZS5OYXRpdmUuRlMudmFsdWVzXG4gICAgICAgIChzZXQhIGxvY2FsUnVudGltZS5OYXRpdmUuRlMudmFsdWVzIHtcblxuICA6ZGlybmFtZSBfX2Rpcm5hbWVcblxuICA6Zl9vayAoOkZfT0sgZnMpXG4gIDpyX29rICg6Ul9PSyBmcylcbiAgOndfb2sgKDpXX09LIGZzKVxuICA6eF9vayAoOlhfT0sgZnMpXG5cbiAgOyBmcy5hY2Nlc3MocGF0aFssIG1vZGVdLCBjYWxsYmFjaylcbiAgOmFjY2VzcyAoZm4gW3BhdGhdXG4gICAgKC5hc3luY0Z1bmN0aW9uIFRhc2sgKGZuIFtjYWxsYmFja11cbiAgICAgICguYWNjZXNzIGZzIHBhdGggKGZuIFtlcnJdXG4gICAgICAgIChjYWxsYmFjayAoLnN1Y2NlZWQgVGFzayAoaWYgZXJyIGZhbHNlIHRydWUpKSkpKSkpKVxuXG4gIDsgZnMuYXBwZW5kRmlsZShmaWxlLCBkYXRhWywgb3B0aW9uc10sIGNhbGxiYWNrKVxuICA6YXBwZW5kRmlsZSAoRjMgKGZuIFttZXJyIHBhdGggZGF0YV1cbiAgICAob28udGFza0NCIG1lcnIgVGFzayBUdXBsZTAgKGZuIFtjYl1cbiAgICAgICguYXBwZW5kRmlsZSBmcyBwYXRoIGRhdGEgY2IpKSkpKVxuXG4gIDsgZnMuY2htb2QocGF0aCwgbW9kZSwgY2FsbGJhY2spXG4gIDpjaG1vZCAoRjMgKGZuIFttZXJyIHBhdGggbW9kZV1cbiAgICAob28udGFza0NCIG1lcnIgVGFzayBUdXBsZTAgKGZuIFtjYl1cbiAgICAgICguY2htb2QgZnMgcGF0aCBtb2RlIGNiKSkpKSlcblxuICA7IGZzLmNob3duKHBhdGgsIHVpZCwgZ2lkLCBjYWxsYmFjaylcbiAgOmNob3duIChGNCAoZm4gW21lcnIgcGF0aCB1aWQgZ2lkXVxuICAgIChvby50YXNrQ0IgbWVyciBUYXNrIFR1cGxlMCAoZm4gW2NiXVxuICAgICAgKC5jaG93biBmcyBwYXRoIHVpZCBnaWQgY2IpKSkpKVxuXG4gIDsgZnMuZmNob3duKGZkLCB1aWQsIGdpZCwgY2FsbGJhY2spXG4gIDpmY2hvd24gKEY0IChmbiBbbWVyciBmZCB1aWQgZ2lkXVxuICAgIChvby50YXNrQ0IgbWVyciBUYXNrIFR1cGxlMCAoZm4gW2NiXVxuICAgICAgKC5mY2hvd24gZnMgZmQgdWlkIGdpZCBjYikpKSkpXG5cbiAgOyBmcy5jbG9zZShmZCwgY2FsbGJhY2spXG4gIDpjbG9zZSAoRjIgKGZuIFttZXJyIGZkXVxuICAgIChvby50YXNrQ0IgbWVyciBUYXNrIFR1cGxlMCAoZm4gW2NiXVxuICAgICAgKC5jbG9zZSBmcyBmZCBjYikpKSkpXG5cbiAgOyBmcy5mY2htb2QoZmQsIG1vZGUsIGNhbGxiYWNrKVxuICA6ZmNobW9kIChGMyAoZm4gW21lcnIgZmQgbW9kZV1cbiAgICAob28udGFza0NCIG1lcnIgVGFzayBUdXBsZTAgKGZuIFtjYl1cbiAgICAgICguZmNobW9kIGZzIGZkIG1vZGUgY2IpKSkpKVxuXG4gIDsgZnMuZnN0YXQoZmQsIGNhbGxiYWNrKVxuICA6ZnN0YXQgKEYyIChmbiBbbWVyciBmZF1cbiAgICAoLmFzeW5jRnVuY3Rpb24gVGFzayAoZm4gW2NhbGxiYWNrXVxuICAgICAgKC5mc3RhdCBmcyBmZCAoZm4gW2VyciBzdGF0c11cbiAgICAgICAgKGNhbGxiYWNrIChpZiBlcnJcbiAgICAgICAgICAoVGFzay5mYWlsIChtZXJyICgudG9TdHJpbmcgZXJyKSkpXG4gICAgICAgICAgKFRhc2suc3VjY2VlZCAobWFyc2hhbGxTdGF0IHN0YXRzKSkpKSkpKSkpKVxuXG4gIDsgZnMuZnN5bmMoZmQsIGNhbGxiYWNrKVxuICA6ZnN5bmMgKEYyIChmbiBbbWVyciBmZF1cbiAgICAob28udGFza0NCIG1lcnIgVGFzayBUdXBsZTAgKGZuIFtjYl1cbiAgICAgICguZnN5bmMgZnMgZmQgY2IpKSkpKVxuXG4gIDsgZnMuZnRydW5jYXRlKGZkLCBsZW4sIGNhbGxiYWNrKVxuICA6ZnRydW5jYXRlIChGMyAoZm4gW21lcnIgbGVuIGZkXVxuICAgIChvby50YXNrQ0IgbWVyciBUYXNrIFR1cGxlMCAoZm4gW2NiXVxuICAgICAgKC5mdHJ1bmNhdGUgZnMgZmQgbGVuIGNiKSkpKSlcblxuICA7IGZzLmxpbmsoc3JjcGF0aCwgZHN0cGF0aCwgY2FsbGJhY2spXG4gIDpsaW5rIChGMyAoZm4gW21lcnIgc3JjcGF0aCBkc3RwYXRoXVxuICAgIChvby50YXNrQ0IgbWVyciBUYXNrIFR1cGxlMCAoZm4gW2NiXVxuICAgICAgKC5saW5rIGZzIHNyY3BhdGggZHN0cGF0aCBjYikpKSkpXG5cbiAgOyBmcy5ta2RpcihwYXRoWywgbW9kZV0sIGNhbGxiYWNrKVxuICA6bWtkaXIgKEYzIChmbiBbbWVyciBwYXRoIG1vZGVdXG4gICAgKG9vLnRhc2tDQiBtZXJyIFRhc2sgVHVwbGUwIChmbiBbY2JdXG4gICAgICAoLm1rZGlyIGZzIHBhdGggbW9kZSBjYikpKSkpXG5cbiAgOyBmcy5yZWFkRmlsZShmaWxlWywgb3B0aW9uc10sIGNhbGxiYWNrKVxuICA6cmVhZEZpbGUgKEYzIChmbiBbbWVyciBvcHRpb25zIHBhdGhdXG4gICAgKC5hc3luY0Z1bmN0aW9uIFRhc2sgKGZuIFtjYWxsYmFja11cbiAgICAgICgucmVhZEZpbGUgZnMgcGF0aCBvcHRpb25zIChmbiBbZXJyIGRhdGFdXG4gICAgICAgIChjYWxsYmFjayAoaWYgZXJyXG4gICAgICAgICAgKFRhc2suZmFpbCAobWVyciAoLnRvU3RyaW5nIGVycikpKVxuICAgICAgICAgIChUYXNrLnN1Y2NlZWQgZGF0YSkpKSkpKSkpKVxuXG4gIDsgZnMub3BlbihwYXRoLCBmbGFnc1ssIG1vZGVdLCBjYWxsYmFjaylcbiAgOm9wZW4gKEY0IChmbiBbbWVyciBwYXRoIGZsYWdzIG1vZGVdXG4gICAgKC5hc3luY0Z1bmN0aW9uIFRhc2sgKGZuIFtjYWxsYmFja11cbiAgICAgICgub3BlbiBmcyBwYXRoIGZsYWdzIG1vZGUgKGZuIFtlcnIgZmRdXG4gICAgICAgIChjYWxsYmFjayAoaWYgZXJyXG4gICAgICAgICAgKFRhc2suZmFpbCAobWVyciAoLnRvU3RyaW5nIGVycikpKVxuICAgICAgICAgIChUYXNrLnN1Y2NlZWQgZmQpKSkpKSkpKSlcblxuICA7IGZzLnJlYWQoZmQsIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uLCBjYWxsYmFjaylcbiAgOnJlYWQgKEY2IChmbiBbbWVyciBmZCBidWZmZXIgb2Zmc2V0IGxlbmd0aCBwb3NpdGlvbl1cbiAgICAoLmFzeW5jRnVuY3Rpb24gVGFzayAoZm4gW2NhbGxiYWNrXVxuICAgICAgKC5yZWFkIGZzIGZkIGJ1ZmZlciBvZmZzZXQgbGVuZ3RoIHBvc2l0aW9uIChmbiBbZXJyIGJ5dGVzUmVhZCBidWZmZXJfXVxuICAgICAgICAoY2FsbGJhY2sgKGlmIGVyclxuICAgICAgICAgIChUYXNrLmZhaWwgKG1lcnIgKC50b1N0cmluZyBlcnIpKSlcbiAgICAgICAgICAoVGFzay5zdWNjZWVkIChUdXBsZTIgYnl0ZXNSZWFkIGJ1ZmZlcl8pKSkpKSkpKSkpXG5cbiAgOyBmcy5yZWFkZGlyKHBhdGgsIGNhbGxiYWNrKVxuICA6cmVhZGRpciAoRjIgKGZuIFttZXJyIHBhdGhdXG4gICAgKC5hc3luY0Z1bmN0aW9uIFRhc2sgKGZuIFtjYWxsYmFja11cbiAgICAgICgucmVhZGRpciBmcyBwYXRoIChmbiBbZXJyIGZpbGVzXVxuICAgICAgICAoY2FsbGJhY2sgKGlmIGVyclxuICAgICAgICAgIChUYXNrLmZhaWwgKG1lcnIgKC50b1N0cmluZyBlcnIpKSlcbiAgICAgICAgICAoVGFzay5zdWNjZWVkIGZpbGVzKSkpKSkpKSkpXG5cbiAgOyBmcy5yZWFkbGluayhwYXRoLCBjYWxsYmFjaylcbiAgOnJlYWRsaW5rIChGMiAoZm4gW21lcnIgcGF0aF1cbiAgICAoLmFzeW5jRnVuY3Rpb24gVGFzayAoZm4gW2NhbGxiYWNrXVxuICAgICAgKC5yZWFkbGluayBmcyBwYXRoIChmbiBbZXJyIGxpbmtTdHJpbmddXG4gICAgICAgIChjYWxsYmFjayAoaWYgZXJyXG4gICAgICAgICAgKFRhc2suZmFpbCAobWVyciAoLnRvU3RyaW5nIGVycikpKVxuICAgICAgICAgIChUYXNrLnN1Y2NlZWQgbGlua1N0cmluZykpKSkpKSkpKVxuXG4gIDsgZnMucmVuYW1lKG9sZFBhdGgsIG5ld1BhdGgsIGNhbGxiYWNrKVxuICA6cmVuYW1lIChGMyAoZm4gW21lcnIgb2xkUGF0aCBuZXdQYXRoXVxuICAgIChvby50YXNrQ0IgbWVyciBUYXNrIFR1cGxlMCAoZm4gW2NiXVxuICAgICAgKC5yZW5hbWUgZnMgb2xkUGF0aCBuZXdQYXRoIGNiKSkpKSlcblxuICA7IGZzLnJtZGlyKHBhdGgsIGNhbGxiYWNrKVxuICA6cm1kaXIgKEYyIChmbiBbbWVyciBwYXRoXVxuICAgIChvby50YXNrQ0IgbWVyciBUYXNrIFR1cGxlMCAoZm4gW2NiXVxuICAgICAgKC5ybWRpciBmcyBwYXRoIGNiKSkpKSlcblxuICA7IGZzLnN0YXQocGF0aCwgY2FsbGJhY2spXG4gIDpzdGF0IChGMiAoZm4gW21lcnIgcGF0aF1cbiAgICAoLmFzeW5jRnVuY3Rpb24gVGFzayAoZm4gW2NhbGxiYWNrXVxuICAgICAgKC5zdGF0IGZzIHBhdGggKGZuIFtlcnIgc3RhdHNdXG4gICAgICAgIChjYWxsYmFjayAoaWYgZXJyXG4gICAgICAgICAgKFRhc2suZmFpbCAobWVyciAoLnRvU3RyaW5nIGVycikpKVxuICAgICAgICAgIChUYXNrLnN1Y2NlZWQgKG1hcnNoYWxsU3RhdCBzdGF0cykpKSkpKSkpKSlcblxuICA7IGZzLnN5bWxpbmsoZGVzdGluYXRpb24sIHBhdGhbLCB0eXBlXSwgY2FsbGJhY2spXG4gIDpzeW1saW5rIChGNCAoZm4gW21lcnIgZGVzdGluYXRpb24gcGF0aCB0eXBlXVxuICAgIChvby50YXNrQ0IgbWVyciBUYXNrIFR1cGxlMCAoZm4gW2NiXVxuICAgICAgKC5zeW1saW5rIGZzIGRlc3RpbmF0aW9uIHBhdGggdHlwZSBjYikpKSkpXG5cbiAgOyBmcy50cnVuY2F0ZShwYXRoLCBsZW4sIGNhbGxiYWNrKVxuICA6dHJ1bmNhdGUgKEYzIChmbiBbbWVyciBwYXRoIGxlbl1cbiAgICAob28udGFza0NCIG1lcnIgVGFzayBUdXBsZTAgKGZuIFtjYl1cbiAgICAgICgudHJ1bmNhdGUgZnMgcGF0aCBsZW4gY2IpKSkpKVxuXG4gIDsgZnMudW5saW5rKHBhdGgsIGNhbGxiYWNrKVxuICA6dW5saW5rIChGMiAoZm4gW21lcnIgcGF0aF1cbiAgICAob28udGFza0NCIG1lcnIgVGFzayBUdXBsZTAgKGZuIFtjYl1cbiAgICAgICgudW5saW5rIGZzIHBhdGggY2IpKSkpKVxuXG4gIDsgZnMudW53YXRjaEZpbGUoZmlsZW5hbWVbLCBsaXN0ZW5lcl0pXG4gIDsgZnMudXRpbWVzKHBhdGgsIGF0aW1lLCBtdGltZSwgY2FsbGJhY2spXG5cbiAgOyBmcy53YXRjaChmaWxlbmFtZVssIG9wdGlvbnNdWywgbGlzdGVuZXJdKVxuICA6d2F0Y2ggKEYzIChmbiBbcGF0aCBvcHRpb25zIGhhbmRsZXJdXG4gICAgKC5hc3luY0Z1bmN0aW9uIFRhc2sgKGZuIFtjYWxsYmFja11cbiAgICAgIChkb1xuICAgICAgICAoLndhdGNoIGZzIHBhdGggb3B0aW9ucyAoZm4gW2V2ZW50IGZpbGVuYW1lXVxuICAgICAgICAgICgucGVyZm9ybSBUYXNrXG4gICAgICAgICAgICAoaGFuZGxlciAoVHVwbGUyIGV2ZW50IGZpbGVuYW1lKSkpKSlcbiAgICAgICAgKGNhbGxiYWNrICguc3VjY2VlZCBUYXNrIFR1cGxlMCkpKSkpKSlcblxuICA7IGZzLndhdGNoRmlsZShmaWxlbmFtZVssIG9wdGlvbnNdLCBsaXN0ZW5lclxuICA6d2F0Y2hGaWxlIChGMyAoZm4gW29wdGlvbnMgcGF0aCBoYW5kbGVyXVxuICAgIChsZXRcbiAgICAgIFtoYW5kbGVyX1xuICAgICAgICAoZm4gW2N1cnIgcHJldl1cbiAgICAgICAgICAoLnBlcmZvcm0gVGFzayAoaGFuZGxlclxuICAgICAgICAgICAgKFR1cGxlMiAobWFyc2hhbGxTdGF0IGN1cnIpIChtYXJzaGFsbFN0YXQgcHJldikpKSkpXVxuICAgICAgKC5hc3luY0Z1bmN0aW9uIFRhc2sgKGZuIFtjYWxsYmFja10gKGRvXG4gICAgICAgICgud2F0Y2hGaWxlIGZzIHBhdGggb3B0aW9ucyBoYW5kbGVyXylcbiAgICAgICAgKGNhbGxiYWNrICguc3VjY2VlZCBUYXNrICguYXN5bmNGdW5jdGlvbiBUYXNrIChmbiBbY2FsbGJhY2tfXSAoZG9cbiAgICAgICAgICAoLnVud2F0Y2hGaWxlIGZzIHBhdGggaGFuZGxlcl8pXG4gICAgICAgICAgKGNhbGxiYWNrXyAoLnN1Y2NlZWQgVGFzayBUdXBsZTApKSkpKSkpKSkpKSkpXG5cbiAgOyBmcy53cml0ZShmZCwgYnVmZmVyLCBvZmZzZXQsIGxlbmd0aFssIHBvc2l0aW9uXSwgY2FsbGJhY2spXG4gIDsgZnMud3JpdGUoZmQsIGRhdGFbLCBwb3NpdGlvblssIGVuY29kaW5nXV0sIGNhbGxiYWNrKVxuXG4gIDsgZnMud3JpdGVGaWxlKGZpbGUsIGRhdGFbLCBvcHRpb25zXSwgY2FsbGJhY2spXG4gIDp3cml0ZUZpbGUgKEY0IChmbiBbbWVyciBmaWxlIGRhdGEgb3B0aW9uc11cbiAgICAoLmFzeW5jRnVuY3Rpb24gVGFzayAoZm4gW2NhbGxiYWNrXVxuICAgICAgKC53cml0ZUZpbGUgZnMgZmlsZSBkYXRhIChmbiBbZXJyXVxuICAgICAgICAoY2FsbGJhY2sgKGlmIGVyclxuICAgICAgICAgICguZXJyb3IgVGFzayAobWVyciAoLnRvU3RyaW5nIGVycikpKVxuICAgICAgICAgICguc3VjY2VlZCBUYXNrIFR1cGxlMCkpKSkpKSkpKVxuXG4gICAgICAgIH0gKSkpKSlcblxuKHNhbml0aXplIEVsbSA6TmF0aXZlIDpGUylcbihzZXQhIEVsbS5OYXRpdmUuRlMubWFrZSBtYWtlKVxuIl19
