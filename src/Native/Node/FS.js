var taskCB = function taskCB(Task, Tuple0, f) {
    return Task.asyncFunction(function (callback) {
        return f(function (err) {
            return callback(err ? Task.error(err) : Task.success(Tuple0));
        });
    });
};
var access = function access(fs, Task) {
    return function (path) {
        return Task.asyncFunction(function (callback) {
            return fs.access(path, function (err) {
                return callback(Task.succeed(err ? false : true));
            });
        });
    };
};
var appendFile = function appendFile(fs, Task, Tuple0) {
    return function (path, data) {
        return taskCB(Task, Tuple0, function (cb) {
            return fs.appendFile(path, data, cb);
        });
    };
};
var chmod = function chmod(fs, Task, Tuple0) {
    return function (path) {
        return taskCB(Task, Tuple0, function (cb) {
            return fs.chmod(path, cb);
        });
    };
};
var chown = function chown(fs, Task, Tuple0) {
    return function (path, uid, gid) {
        return taskCB(Task, Tuple0, function (cb) {
            return fs.chown(path, uid, gid, cb);
        });
    };
};
var sanitize = function sanitize(record) {
    var spaces = Array.prototype.slice.call(arguments, 1);
    return spaces.reduce(function (r, space) {
        return (function () {
            r[space] ? void 0 : r[space] = {};
            return r[space];
        })();
    }, record);
};
var make = function make(localRuntime) {
    return function () {
        var fsø1 = require('fs');
        var Taskø1 = Elm.Native.Task.make(localRuntime);
        var Utilsø1 = Elm.Native.Utils.make(localRuntime);
        var Tuple0ø1 = (Utilsø1 || 0)['Tuple0'];
        return (function () {
            sanitize(localRuntime, 'Native', 'Node', 'FS');
            return localRuntime.Native.Node.FS.values ? localRuntime.Native.Node.FS.values : localRuntime.Native.Node.FS.values = {
                'access': access(fsø1, Taskø1),
                'appendFile': F2(appendFile(fsø1, Taskø1, Tuple0ø1)),
                'chmod': chmod(fsø1, Taskø1, Tuple0ø1),
                'chown': chown(fsø1, Taskø1, Tuple0ø1)
            };
        })();
    }.call(this);
};
sanitize(Elm, 'Native', 'Node', 'FS');
Elm.Native.Node.FS.make = make;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFub255bW91cy53aXNwIl0sIm5hbWVzIjpbInRhc2tDQiIsIlRhc2siLCJUdXBsZTAiLCJmIiwiYXN5bmNGdW5jdGlvbiIsImNhbGxiYWNrIiwiZXJyIiwiZXJyb3IiLCJzdWNjZXNzIiwiYWNjZXNzIiwiZnMiLCJwYXRoIiwic3VjY2VlZCIsImFwcGVuZEZpbGUiLCJkYXRhIiwiY2IiLCJjaG1vZCIsImNob3duIiwidWlkIiwiZ2lkIiwic2FuaXRpemUiLCJyZWNvcmQiLCJzcGFjZXMiLCJyZWR1Y2UiLCJyIiwic3BhY2UiLCJtYWtlIiwibG9jYWxSdW50aW1lIiwiZnPDuDEiLCJyZXF1aXJlIiwiVGFza8O4MSIsIkVsbSIsIk5hdGl2ZS5UYXNrLm1ha2UiLCJVdGlsc8O4MSIsIk5hdGl2ZS5VdGlscy5tYWtlIiwiVHVwbGUww7gxIiwiTmF0aXZlLk5vZGUuRlMudmFsdWVzIiwiRjIiLCJOYXRpdmUuTm9kZS5GUy5tYWtlIl0sIm1hcHBpbmdzIjoiQUFpQ0EsSUFBT0EsTUFBQSxHQUFQLFNBQU9BLE1BQVAsQ0FDR0MsSUFESCxFQUNRQyxNQURSLEVBQ2VDLENBRGYsRUFFRTtBQUFBLFdBQWdCRixJQUFmLENBQUNHLGFBQUYsQ0FBcUIsVUFDbEJDLFFBRGtCLEVBRW5CO0FBQUEsZUFBQ0YsQ0FBRCxDQUFHLFVBQ0FHLEdBREEsRUFFRDtBQUFBLG1CQUFDRCxRQUFELENBQWNDLEdBQUosR0FDUEwsSUFBQSxDQUFLTSxLQUFOLENBQVlELEdBQVosQ0FEUSxHQUVQTCxJQUFBLENBQUtPLE9BQU4sQ0FBY04sTUFBZCxDQUZGO0FBQUEsU0FGRjtBQUFBLEtBRkY7QUFBQSxDQUZGO0FBV0EsSUFBT08sTUFBQSxHQUFQLFNBQU9BLE1BQVAsQ0FDR0MsRUFESCxFQUNNVCxJQUROLEVBQ1k7QUFBQSxxQkFDVFUsSUFEUyxFQUVWO0FBQUEsZUFBZ0JWLElBQWYsQ0FBQ0csYUFBRixDQUFxQixVQUNsQkMsUUFEa0IsRUFFbkI7QUFBQSxtQkFBU0ssRUFBUixDQUFDRCxN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LElBQVosRUFBZUUsTUFBZixFQUFvQkssUUFBcEIsQ0FBSixDQUYyQjtBQUFBLGdCLFNBRy9CbkIsS0FBRCxDQUFPWSxJQUFQLEVBQVVFLE1BQVYsRUFBZUssUUFBZixDQUhnQztBQUFBLGdCLFNBSS9CbEIsS0FBRCxDQUFPVyxJQUFQLEVBQVVFLE1BQVYsRUFBZUssUUFBZixDQUpnQztBQUFBLGFBRjdDLENBREE7QUFBQSxTLENBQUEsRUFERixDQUpDO0FBQUEsSyxLQURjLEMsSUFBQTtBQUFBLENBRGpCLENBbERBO0FBa0VDZixRQUFELENBQVVXLEdBQVYsRSxRQUFBLEUsTUFBQSxFLElBQUEsRUFsRUE7QUFtRU1BLEdBQUEsQ0FBSU8sbUJBQVYsR0FBOEJaLElBQTlCIiwic291cmNlc0NvbnRlbnQiOlsiOyBmcy5jbG9zZShmZCwgY2FsbGJhY2spXG47IGZzLmV4aXN0cyhwYXRoLCBjYWxsYmFjaylcbjsgZnMuZmNobW9kKGZkLCBtb2RlLCBjYWxsYmFjaylcbjsgZnMuZmNob3duKGZkLCB1aWQsIGdpZCwgY2FsbGJhY2spXG47IGZzLmZzdGF0KGZkLCBjYWxsYmFjaylcbjsgZnMuZnN5bmMoZmQsIGNhbGxiYWNrKVxuOyBmcy5mdHJ1bmNhdGUoZmQsIGxlbiwgY2FsbGJhY2spXG47IGZzLmZ1dGltZXMoZmQsIGF0aW1lLCBtdGltZSwgY2FsbGJhY2spXG47IGZzLmxjaG1vZChwYXRoLCBtb2RlLCBjYWxsYmFjaylcbjsgZnMubGNob3duKHBhdGgsIHVpZCwgZ2lkLCBjYWxsYmFjaylcbjsgZnMubGluayhzcmNwYXRoLCBkc3RwYXRoLCBjYWxsYmFjaylcbjsgZnMubHN0YXQocGF0aCwgY2FsbGJhY2spXG47IGZzLm1rZGlyKHBhdGhbLCBtb2RlXSwgY2FsbGJhY2spXG47IGZzLm9wZW4ocGF0aCwgZmxhZ3NbLCBtb2RlXSwgY2FsbGJhY2spXG47IGZzLnJlYWQoZmQsIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uLCBjYWxsYmFjaylcbjsgZnMucmVhZGRpcihwYXRoLCBjYWxsYmFjaylcbjsgZnMucmVhZEZpbGUoZmlsZVssIG9wdGlvbnNdLCBjYWxsYmFjaylcbjsgZnMucmVhZGxpbmsocGF0aCwgY2FsbGJhY2spXG47IGZzLnJlYWxwYXRoKHBhdGhbLCBjYWNoZV0sIGNhbGxiYWNrKVxuOyBmcy5yZW5hbWUob2xkUGF0aCwgbmV3UGF0aCwgY2FsbGJhY2spXG47IGZzLnJtZGlyKHBhdGgsIGNhbGxiYWNrKVxuOyBmcy5zdGF0KHBhdGgsIGNhbGxiYWNrKVxuOyBmcy5zeW1saW5rKGRlc3RpbmF0aW9uLCBwYXRoWywgdHlwZV0sIGNhbGxiYWNrKVxuOyBmcy50cnVuY2F0ZShwYXRoLCBsZW4sIGNhbGxiYWNrKVxuOyBmcy51bmxpbmsocGF0aCwgY2FsbGJhY2spXG47IGZzLnVud2F0Y2hGaWxlKGZpbGVuYW1lWywgbGlzdGVuZXJdKVxuOyBmcy51dGltZXMocGF0aCwgYXRpbWUsIG10aW1lLCBjYWxsYmFjaylcbjsgZnMud2F0Y2goZmlsZW5hbWVbLCBvcHRpb25zXVssIGxpc3RlbmVyXSlcbjsgZnMud2F0Y2hGaWxlKGZpbGVuYW1lWywgb3B0aW9uc10sIGxpc3RlbmVyKVxuOyBmcy53cml0ZShmZCwgYnVmZmVyLCBvZmZzZXQsIGxlbmd0aFssIHBvc2l0aW9uXSwgY2FsbGJhY2spXG47IGZzLndyaXRlKGZkLCBkYXRhWywgcG9zaXRpb25bLCBlbmNvZGluZ11dLCBjYWxsYmFjaylcbjsgZnMud3JpdGVGaWxlKGZpbGUsIGRhdGFbLCBvcHRpb25zXSwgY2FsbGJhY2spXG5cbihkZWZuLSB0YXNrQ0JcbiAgW1Rhc2sgVHVwbGUwIGZdXG4gICguYXN5bmNGdW5jdGlvbiBUYXNrIChmblxuICAgIFtjYWxsYmFja11cbiAgICAoZiAoZm5cbiAgICAgIFtlcnJdXG4gICAgICAoY2FsbGJhY2sgKGlmIGVyclxuICAgICAgICAoVGFzay5lcnJvciBlcnIpXG4gICAgICAgIChUYXNrLnN1Y2Nlc3MgVHVwbGUwKSkpKSkpKSlcblxuOyBmcy5hY2Nlc3MocGF0aFssIG1vZGVdLCBjYWxsYmFjaylcbihkZWZuLSBhY2Nlc3NcbiAgW2ZzIFRhc2tdIChmblxuICBbcGF0aF1cbiAgKC5hc3luY0Z1bmN0aW9uIFRhc2sgKGZuXG4gICAgW2NhbGxiYWNrXVxuICAgICguYWNjZXNzIGZzIHBhdGggKGZuXG4gICAgICBbZXJyXVxuICAgICAgKGNhbGxiYWNrICguc3VjY2VlZCBUYXNrIChpZiBlcnIgZmFsc2UgdHJ1ZSkpKSkpKSkpKVxuXG47IGZzLmFwcGVuZEZpbGUoZmlsZSwgZGF0YVssIG9wdGlvbnNdLCBjYWxsYmFjaylcbihkZWZuLSBhcHBlbmRGaWxlXG4gIFtmcyBUYXNrIFR1cGxlMF0gKGZuXG4gIFtwYXRoIGRhdGFdXG4gICh0YXNrQ0IgVGFzayBUdXBsZTAgKGZuXG4gICAgW2NiXVxuICAgICguYXBwZW5kRmlsZSBmcyBwYXRoIGRhdGEgY2IpKSkpKVxuXG47IGZzLmNobW9kKHBhdGgsIG1vZGUsIGNhbGxiYWNrKVxuKGRlZm4tIGNobW9kXG4gIFtmcyBUYXNrIFR1cGxlMF0gKGZuXG4gIFtwYXRoXVxuICAodGFza0NCIFRhc2sgVHVwbGUwIChmblxuICAgIFtjYl1cbiAgICAoLmNobW9kIGZzIHBhdGggY2IpKSkpKVxuXG47IGZzLmNob3duKHBhdGgsIHVpZCwgZ2lkLCBjYWxsYmFjaylcbihkZWZuLSBjaG93blxuICBbZnMgVGFzayBUdXBsZTBdIChmblxuICBbcGF0aCB1aWQgZ2lkXVxuICAodGFza0NCIFRhc2sgVHVwbGUwIChmblxuICAgIFtjYl1cbiAgICAoLmNob3duIGZzIHBhdGggdWlkIGdpZCBjYikpKSkpXG5cbihkZWZuLSBzYW5pdGl6ZSBbcmVjb3JkICYgc3BhY2VzXVxuICAoc3BhY2VzLnJlZHVjZSAoZm4gW3Igc3BhY2VdIChkb1xuICAgIChpZiAoYWdldCByIHNwYWNlKSBuaWwgKHNldCEgKGFnZXQgciBzcGFjZSkge30pKVxuICAgIChhZ2V0IHIgc3BhY2UpKSlcbiAgcmVjb3JkKSlcblxuKGRlZm4tIG1ha2VcbiAgW2xvY2FsUnVudGltZV0gKGxldFxuICBbZnMgICAgIChyZXF1aXJlIFwiZnNcIilcbiAgIFRhc2sgICAoRWxtLk5hdGl2ZS5UYXNrLm1ha2UgIGxvY2FsUnVudGltZSlcbiAgIFV0aWxzICAoRWxtLk5hdGl2ZS5VdGlscy5tYWtlIGxvY2FsUnVudGltZSlcbiAgIFR1cGxlMCAoOlR1cGxlMCBVdGlscyldXG4gIChkb1xuICAgIChzYW5pdGl6ZSBsb2NhbFJ1bnRpbWUgOk5hdGl2ZSA6Tm9kZSA6RlMpXG4gICAgKGlmIGxvY2FsUnVudGltZS5OYXRpdmUuTm9kZS5GUy52YWx1ZXNcbiAgICAgICAgbG9jYWxSdW50aW1lLk5hdGl2ZS5Ob2RlLkZTLnZhbHVlc1xuICAgICAgICAoc2V0ISBsb2NhbFJ1bnRpbWUuTmF0aXZlLk5vZGUuRlMudmFsdWVzIHtcbiAgICAgICAgICA6YWNjZXNzIChhY2Nlc3MgZnMgVGFzaylcbiAgICAgICAgICA6YXBwZW5kRmlsZSAoRjIgKGFwcGVuZEZpbGUgZnMgVGFzayBUdXBsZTApKVxuICAgICAgICAgIDpjaG1vZCAoY2htb2QgZnMgVGFzayBUdXBsZTApXG4gICAgICAgICAgOmNob3duIChjaG93biBmcyBUYXNrIFR1cGxlMCkgfSkpKSkpXG5cbihzYW5pdGl6ZSBFbG0gOk5hdGl2ZSA6Tm9kZSA6RlMpXG4oc2V0ISBFbG0uTmF0aXZlLk5vZGUuRlMubWFrZSBtYWtlKVxuIl19
