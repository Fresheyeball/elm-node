var sanitize = function sanitize(record) {
    var spaces = Array.prototype.slice.call(arguments, 1);
    return spaces.reduce(function (r, space) {
        return (function () {
            r[space] ? void 0 : r[space] = {};
            return r[space];
        })();
    }, record);
};
var createReadStream = function createReadStream(fs, Task) {
    return function (path) {
        return Task.succeed(fs.createReadStream(path));
    };
};
var createWriteStream = function createWriteStream(fs, Task) {
    return function (path) {
        return Task.succeed(fs.createWriteStream(path));
    };
};
var make = function make(localRuntime) {
    return function () {
        var fsø1 = require('fs');
        var Taskø1 = Elm.Native.Task.make(localRuntime);
        return (function () {
            sanitize(localRuntime, 'Native', 'Node', 'FS', 'Streams');
            return localRuntime.Native.Node.FS.Streams.values ? localRuntime.Native.Node.FS.Streams.values : localRuntime.Native.Node.FS.Streams.values = {
                'createReadStream': createReadStream(fsø1, Taskø1),
                'createWriteStream': createWriteStream(fsø1, Taskø1)
            };
        })();
    }.call(this);
};
sanitize(Elm, 'Native', 'Node', 'FS', 'Streams');
Elm.Native.Node.FS.Streams.make = make;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFub255bW91cy53aXNwIl0sIm5hbWVzIjpbInNhbml0aXplIiwicmVjb3JkIiwic3BhY2VzIiwicmVkdWNlIiwiciIsInNwYWNlIiwiY3JlYXRlUmVhZFN0cmVhbSIsImZzIiwiVGFzayIsInBhdGgiLCJzdWNjZWVkIiwiY3JlYXRlV3JpdGVTdHJlYW0iLCJtYWtlIiwibG9jYWxSdW50aW1lIiwiZnPDuDEiLCJyZXF1aXJlIiwiVGFza8O4MSIsIkVsbSIsIk5hdGl2ZS5UYXNrLm1ha2UiLCJOYXRpdmUuTm9kZS5GUy5TdHJlYW1zLnZhbHVlcyIsIk5hdGl2ZS5Ob2RlLkZTLlN0cmVhbXMubWFrZSJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBT0EsUUFBQSxHQUFQLFNBQU9BLFFBQVAsQ0FBaUJDLE1BQWpCLEU7UUFBMEJDLE1BQUEsRztJQUN4QixPQUFDQSxNQUFBLENBQU9DLE1BQVIsQ0FBZSxVQUFLQyxDQUFMLEVBQU9DLEtBQVAsRUFBYztBQUFBLGUsYUFDM0I7QUFBQSxZQUFVRCxDQUFOLENBQVFDLEtBQVIsQ0FBSixHLE1BQUEsR0FBbUNELENBQU4sQ0FBUUMsS0FBUixDQUFOLEdBQXFCLEVBQTVDO0FBQUEsWUFDQSxPQUFNRCxDQUFOLENBQVFDLEtBQVIsRUFEQTtBQUFBLFMsQ0FBQSxFQUQyQjtBQUFBLEtBQTdCLEVBR0FKLE1BSEEsRTtDQURGO0FBTUEsSUFBT0ssZ0JBQUEsR0FBUCxTQUFPQSxnQkFBUCxDQUNHQyxFQURILEVBQ01DLElBRE4sRUFDWTtBQUFBLHFCQUNUQyxJQURTLEVBRVY7QUFBQSxlQUFDRCxJQUFBLENBQUtFLE9BQU4sQ0FBaUNILEVBQWxCLENBQUNELGdCQUFGLENBQXNCRyxJQUF0QixDQUFkO0FBQUEsS0FGVTtBQUFBLENBRFosQ0FOQTtBQVdBLElBQU9FLGlCQUFBLEdBQVAsU0FBT0EsaUJBQVAsQ0FDR0osRUFESCxFQUNNQyxJQUROLEVBQ1k7QUFBQSxxQkFDVEMsSUFEUyxFQUVWO0FBQUEsZUFBQ0QsSUFBQSxDQUFLRSxPQUFOLENBQWtDSCxFQUFuQixDQUFDSSxpQkFBRixDQUF1QkYsSUFBdkIsQ0FBZDtBQUFBLEtBRlU7QUFBQSxDQURaLENBWEE7QUFnQkEsSUFBT0csSUFBQSxHQUFQLFNBQU9BLElBQVAsQ0FDR0MsWUFESCxFQUNpQjtBQUFBLFcsWUFDZDtBQUFBLFlBQUFDLEksR0FBUUMsT0FBRCxDQUFTLElBQVQsQ0FBUDtBQUFBLFFBQ0EsSUFBQUMsTSxHQUFRQyxHQUFBLENBQUlDLGdCQUFMLENBQXVCTCxZQUF2QixDQUFQLENBREE7QUFBQSxRQUVELE8sYUFDRTtBQUFBLFlBQUNiLFFBQUQsQ0FBVWEsWUFBVixFLFFBQUEsRSxNQUFBLEUsSUFBQSxFLFNBQUE7QUFBQSxZQUNBLE9BQUlBLFlBQUEsQ0FBYU0sNkJBQWpCLEdBQ0lOLFlBQUEsQ0FBYU0sNkJBRGpCLEdBRVVOLFlBQUEsQ0FBYU0sNkJBQW5CLEdBQWlEO0FBQUEsZ0Isb0JBQzNCYixnQkFBRCxDQUFtQlEsSUFBbkIsRUFBc0JFLE1BQXRCLENBRDRCO0FBQUEsZ0IscUJBRTNCTCxpQkFBRCxDQUFtQkcsSUFBbkIsRUFBc0JFLE1BQXRCLENBRjRCO0FBQUEsYUFGckQsQ0FEQTtBQUFBLFMsQ0FBQSxFQURGLENBRkM7QUFBQSxLLEtBRGMsQyxJQUFBO0FBQUEsQ0FEakIsQ0FoQkE7QUE0QkNoQixRQUFELENBQVVpQixHQUFWLEUsUUFBQSxFLE1BQUEsRSxJQUFBLEUsU0FBQSxFQTVCQTtBQTZCTUEsR0FBQSxDQUFJRywyQkFBVixHQUFzQ1IsSUFBdEMiLCJzb3VyY2VzQ29udGVudCI6WyIoZGVmbi0gc2FuaXRpemUgW3JlY29yZCAmIHNwYWNlc11cbiAgKHNwYWNlcy5yZWR1Y2UgKGZuIFtyIHNwYWNlXSAoZG9cbiAgICAoaWYgKGFnZXQgciBzcGFjZSkgbmlsIChzZXQhIChhZ2V0IHIgc3BhY2UpIHt9KSlcbiAgICAoYWdldCByIHNwYWNlKSkpXG4gIHJlY29yZCkpXG5cbihkZWZuLSBjcmVhdGVSZWFkU3RyZWFtXG4gIFtmcyBUYXNrXSAoZm5cbiAgW3BhdGhdXG4gIChUYXNrLnN1Y2NlZWQgKC5jcmVhdGVSZWFkU3RyZWFtIGZzIHBhdGgpKSkpXG5cbihkZWZuLSBjcmVhdGVXcml0ZVN0cmVhbVxuICBbZnMgVGFza10gKGZuXG4gIFtwYXRoXVxuICAoVGFzay5zdWNjZWVkICguY3JlYXRlV3JpdGVTdHJlYW0gZnMgcGF0aCkpKSlcblxuKGRlZm4tIG1ha2VcbiAgW2xvY2FsUnVudGltZV0gKGxldFxuICBbZnMgICAgIChyZXF1aXJlIFwiZnNcIilcbiAgIFRhc2sgICAoRWxtLk5hdGl2ZS5UYXNrLm1ha2UgIGxvY2FsUnVudGltZSldXG4gIChkb1xuICAgIChzYW5pdGl6ZSBsb2NhbFJ1bnRpbWUgOk5hdGl2ZSA6Tm9kZSA6RlMgOlN0cmVhbXMpXG4gICAgKGlmIGxvY2FsUnVudGltZS5OYXRpdmUuTm9kZS5GUy5TdHJlYW1zLnZhbHVlc1xuICAgICAgICBsb2NhbFJ1bnRpbWUuTmF0aXZlLk5vZGUuRlMuU3RyZWFtcy52YWx1ZXNcbiAgICAgICAgKHNldCEgbG9jYWxSdW50aW1lLk5hdGl2ZS5Ob2RlLkZTLlN0cmVhbXMudmFsdWVzIHtcbiAgICAgICAgICA6Y3JlYXRlUmVhZFN0cmVhbSAgKGNyZWF0ZVJlYWRTdHJlYW0gIGZzIFRhc2spXG4gICAgICAgICAgOmNyZWF0ZVdyaXRlU3RyZWFtIChjcmVhdGVXcml0ZVN0cmVhbSBmcyBUYXNrKSB9KSkpKSlcblxuKHNhbml0aXplIEVsbSA6TmF0aXZlIDpOb2RlIDpGUyA6U3RyZWFtcylcbihzZXQhIEVsbS5OYXRpdmUuTm9kZS5GUy5TdHJlYW1zLm1ha2UgbWFrZSlcbiJdfQ==
