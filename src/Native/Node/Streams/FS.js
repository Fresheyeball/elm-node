var sanitize = function sanitize(record) {
    var spaces = Array.prototype.slice.call(arguments, 1);
    return spaces.reduce(function (r, space) {
        return (function () {
            r[space] ? void 0 : r[space] = {};
            return r[space];
        })();
    }, record);
};
var createReadStream = function createReadStream(fs, Task) {
    return function (path) {
        return Task.succeed(fs.createReadStream(path));
    };
};
var on = function on(Task) {
    return function (eventName, stream, aToTask) {
        return Task.asyncFunction(function (callback) {
            return stream.on(eventName, function (chunk) {
                return (function () {
                    console.log(chunk.toString('utf8'));
                    return callback(aToTask(chunk));
                })();
            });
        });
    };
};
var make = function make(localRuntime) {
    return function () {
        var fsø1 = require('fs');
        var Taskø1 = Elm.Native.Task.make(localRuntime);
        return (function () {
            sanitize(localRuntime, 'Native', 'Node', 'Streams', 'FS');
            return localRuntime.Native.Node.Streams.FS.values ? localRuntime.Native.Node.Streams.FS.values : localRuntime.Native.Node.Streams.FS.values = {
                'foo': 'foo',
                'on': F3(on(Taskø1)),
                'createReadStream': createReadStream(fsø1, Taskø1)
            };
        })();
    }.call(this);
};
sanitize(Elm, 'Native', 'Node', 'Streams', 'FS');
Elm.Native.Node.Streams.FS.make = make;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFub255bW91cy53aXNwIl0sIm5hbWVzIjpbInNhbml0aXplIiwicmVjb3JkIiwic3BhY2VzIiwicmVkdWNlIiwiciIsInNwYWNlIiwiY3JlYXRlUmVhZFN0cmVhbSIsImZzIiwiVGFzayIsInBhdGgiLCJzdWNjZWVkIiwib24iLCJldmVudE5hbWUiLCJzdHJlYW0iLCJhVG9UYXNrIiwiYXN5bmNGdW5jdGlvbiIsImNhbGxiYWNrIiwiY2h1bmsiLCJjb25zb2xlIiwibG9nIiwidG9TdHJpbmciLCJtYWtlIiwibG9jYWxSdW50aW1lIiwiZnPDuDEiLCJyZXF1aXJlIiwiVGFza8O4MSIsIkVsbSIsIk5hdGl2ZS5UYXNrLm1ha2UiLCJOYXRpdmUuTm9kZS5TdHJlYW1zLkZTLnZhbHVlcyIsIkYzIiwiTmF0aXZlLk5vZGUuU3RyZWFtcy5GUy5tYWtlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFPQSxRQUFBLEdBQVAsU0FBT0EsUUFBUCxDQUFpQkMsTUFBakIsRTtRQUEwQkMsTUFBQSxHO0lBQ3hCLE9BQUNBLE1BQUEsQ0FBT0MsTUFBUixDQUFlLFVBQUtDLENBQUwsRUFBT0MsS0FBUCxFQUFjO0FBQUEsZSxhQUMzQjtBQUFBLFlBQVVELENBQU4sQ0FBUUMsS0FBUixDQUFKLEcsTUFBQSxHQUFtQ0QsQ0FBTixDQUFRQyxLQUFSLENBQU4sR0FBcUIsRUFBNUM7QUFBQSxZQUNBLE9BQU1ELENBQU4sQ0FBUUMsS0FBUixFQURBO0FBQUEsUyxDQUFBLEVBRDJCO0FBQUEsS0FBN0IsRUFHQUosTUFIQSxFO0NBREY7QUFNQSxJQUFPSyxnQkFBQSxHQUFQLFNBQU9BLGdCQUFQLENBQ0dDLEVBREgsRUFDTUMsSUFETixFQUNZO0FBQUEscUJBQ1RDLElBRFMsRUFFUjtBQUFBLGVBQUNELElBQUEsQ0FBS0UsT0FBTixDQUFpQ0gsRUFBbEIsQ0FBQ0QsZ0JBQUYsQ0FBc0JHLElBQXRCLENBQWQ7QUFBQSxLQUZRO0FBQUEsQ0FEWixDQU5BO0FBV0EsSUFBT0UsRUFBQSxHQUFQLFNBQU9BLEVBQVAsQ0FDR0gsSUFESCxFQUNTO0FBQUEscUJBQ05JLFNBRE0sRUFDSUMsTUFESixFQUNXQyxPQURYLEVBRVA7QUFBQSxlQUFnQk4sSUFBZixDQUFDTyxhQUFGLENBQXFCLFVBQ2xCQyxRQURrQixFQUVuQjtBQUFBLG1CQUFLSCxNQUFKLENBQUNGLEVBQUYsQ0FBWUMsU0FBWixFQUFzQixVQUNuQkssS0FEbUIsRUFFcEI7QUFBQSx1QixhQUNFO0FBQUEsb0JBQU1DLE9BQUwsQ0FBQ0MsR0FBRixDQUF5QkYsS0FBVixDQUFDRyxRQUFGLEMsTUFBQSxDQUFkO0FBQUEsb0JBQ0EsT0FBQ0osUUFBRCxDQUFXRixPQUFELENBQVNHLEtBQVQsQ0FBVixFQURBO0FBQUEsaUIsQ0FBQSxFQURGO0FBQUEsYUFGRjtBQUFBLFNBRkY7QUFBQSxLQUZPO0FBQUEsQ0FEVCxDQVhBO0FBc0JBLElBQU9JLElBQUEsR0FBUCxTQUFPQSxJQUFQLENBQ0dDLFlBREgsRUFDaUI7QUFBQSxXLFlBQ2Q7QUFBQSxZQUFBQyxJLEdBQU1DLE9BQUQsQ0FBUyxJQUFULENBQUw7QUFBQSxRQUNBLElBQUFDLE0sR0FBTUMsR0FBQSxDQUFJQyxnQkFBTCxDQUFzQkwsWUFBdEIsQ0FBTCxDQURBO0FBQUEsUUFFRCxPLGFBQ0U7QUFBQSxZQUFDdEIsUUFBRCxDQUFVc0IsWUFBVixFLFFBQUEsRSxNQUFBLEUsU0FBQSxFLElBQUE7QUFBQSxZQUNBLE9BQUlBLFlBQUEsQ0FBYU0sNkJBQWpCLEdBQ0lOLFlBQUEsQ0FBYU0sNkJBRGpCLEdBRVVOLFlBQUEsQ0FBYU0sNkJBQW5CLEdBQWlEO0FBQUEsZ0IsT0FDMUMsS0FEMEM7QUFBQSxnQixNQUUxQ0MsRUFBRCxDQUFLbEIsRUFBRCxDQUFJYyxNQUFKLENBQUosQ0FGMkM7QUFBQSxnQixvQkFHNUJuQixnQkFBRCxDQUFrQmlCLElBQWxCLEVBQXFCRSxNQUFyQixDQUg2QjtBQUFBLGFBRnJELENBREE7QUFBQSxTLENBQUEsRUFERixDQUZDO0FBQUEsSyxLQURjLEMsSUFBQTtBQUFBLENBRGpCLENBdEJBO0FBbUNDekIsUUFBRCxDQUFVMEIsR0FBVixFLFFBQUEsRSxNQUFBLEUsU0FBQSxFLElBQUEsRUFuQ0E7QUFvQ01BLEdBQUEsQ0FBSUksMkJBQVYsR0FBc0NULElBQXRDIiwic291cmNlc0NvbnRlbnQiOlsiKGRlZm4tIHNhbml0aXplIFtyZWNvcmQgJiBzcGFjZXNdXG4gIChzcGFjZXMucmVkdWNlIChmbiBbciBzcGFjZV0gKGRvXG4gICAgKGlmIChhZ2V0IHIgc3BhY2UpIG5pbCAoc2V0ISAoYWdldCByIHNwYWNlKSB7fSkpXG4gICAgKGFnZXQgciBzcGFjZSkpKVxuICByZWNvcmQpKVxuXG4oZGVmbi0gY3JlYXRlUmVhZFN0cmVhbVxuICBbZnMgVGFza10gKGZuXG4gIFtwYXRoXVxuICAgIChUYXNrLnN1Y2NlZWQgKC5jcmVhdGVSZWFkU3RyZWFtIGZzIHBhdGgpKSkpXG5cbihkZWZuLSBvblxuICBbVGFza10gKGZuXG4gIFtldmVudE5hbWUgc3RyZWFtIGFUb1Rhc2tdXG4gICguYXN5bmNGdW5jdGlvbiBUYXNrIChmblxuICAgIFtjYWxsYmFja11cbiAgICAoLm9uIHN0cmVhbSBldmVudE5hbWUgKGZuXG4gICAgICBbY2h1bmtdXG4gICAgICAoZG9cbiAgICAgICAgKC5sb2cgY29uc29sZSAoLnRvU3RyaW5nIGNodW5rIDp1dGY4KSlcbiAgICAgICAgKGNhbGxiYWNrIChhVG9UYXNrIGNodW5rKSkpKSkpKSkpXG5cbihkZWZuLSBtYWtlXG4gIFtsb2NhbFJ1bnRpbWVdIChsZXRcbiAgW2ZzICAgKHJlcXVpcmUgXCJmc1wiKVxuICAgVGFzayAoRWxtLk5hdGl2ZS5UYXNrLm1ha2UgbG9jYWxSdW50aW1lKV1cbiAgKGRvXG4gICAgKHNhbml0aXplIGxvY2FsUnVudGltZSA6TmF0aXZlIDpOb2RlIDpTdHJlYW1zIDpGUylcbiAgICAoaWYgbG9jYWxSdW50aW1lLk5hdGl2ZS5Ob2RlLlN0cmVhbXMuRlMudmFsdWVzXG4gICAgICAgIGxvY2FsUnVudGltZS5OYXRpdmUuTm9kZS5TdHJlYW1zLkZTLnZhbHVlc1xuICAgICAgICAoc2V0ISBsb2NhbFJ1bnRpbWUuTmF0aXZlLk5vZGUuU3RyZWFtcy5GUy52YWx1ZXMge1xuICAgICAgICAgIDpmb28gXCJmb29cIlxuICAgICAgICAgIDpvbiAoRjMgKG9uIFRhc2spKVxuICAgICAgICAgIDpjcmVhdGVSZWFkU3RyZWFtIChjcmVhdGVSZWFkU3RyZWFtIGZzIFRhc2spIH0pKSkpKVxuXG4oc2FuaXRpemUgRWxtIDpOYXRpdmUgOk5vZGUgOlN0cmVhbXMgOkZTKVxuKHNldCEgRWxtLk5hdGl2ZS5Ob2RlLlN0cmVhbXMuRlMubWFrZSBtYWtlKVxuIl19
