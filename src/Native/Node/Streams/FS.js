var sanitize = function sanitize(record) {
    var spaces = Array.prototype.slice.call(arguments, 1);
    return spaces.reduce(function (r, space) {
        return (function () {
            r[space] ? void 0 : r[space] = {};
            return r[space];
        })();
    }, record);
};
var createReadStream = function createReadStream(fs, Task) {
    return function (path) {
        return Task.succeed(fs.createReadStream(path));
    };
};
var createWriteStream = function createWriteStream(fs, Task) {
    return function (path) {
        return Task.succeed(fs.createWriteStream(path));
    };
};
var pipe = function pipe(fs, Task, Tuple0) {
    return function (readable, writable) {
        return (function () {
            readable.pipe(writable);
            return Task.succeed(Tuple0);
        })();
    };
};
var logBuffer = function logBuffer(Task, Tuple0) {
    return function (encoding, chunk) {
        return (function () {
            console.log(chunk ? chunk.toString(encoding) : chunk);
            return Task.succeed(Tuple0);
        })();
    };
};
var on = function on(Task) {
    return function (eventName, stream, aToTask) {
        return Task.asyncFunction(function (callback) {
            return stream.on(eventName, function (chunk) {
                return callback(aToTask(chunk));
            });
        });
    };
};
var make = function make(localRuntime) {
    return function () {
        var fsø1 = require('fs');
        var Taskø1 = Elm.Native.Task.make(localRuntime);
        var Utilsø1 = Elm.Native.Utils.make(localRuntime);
        var Tuple0ø1 = (Utilsø1 || 0)['Tuple0'];
        return (function () {
            sanitize(localRuntime, 'Native', 'Node', 'Streams', 'FS');
            return localRuntime.Native.Node.Streams.FS.values ? localRuntime.Native.Node.Streams.FS.values : localRuntime.Native.Node.Streams.FS.values = {
                'on': F3(on(Taskø1)),
                'pipe': F2(pipe(fsø1, Taskø1, Tuple0ø1)),
                'logBuffer': F2(logBuffer(Taskø1, Tuple0ø1)),
                'createReadStream': createReadStream(fsø1, Taskø1),
                'createWriteStream': createWriteStream(fsø1, Taskø1)
            };
        })();
    }.call(this);
};
sanitize(Elm, 'Native', 'Node', 'Streams', 'FS');
Elm.Native.Node.Streams.FS.make = make;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFub255bW91cy53aXNwIl0sIm5hbWVzIjpbInNhbml0aXplIiwicmVjb3JkIiwic3BhY2VzIiwicmVkdWNlIiwiciIsInNwYWNlIiwiY3JlYXRlUmVhZFN0cmVhbSIsImZzIiwiVGFzayIsInBhdGgiLCJzdWNjZWVkIiwiY3JlYXRlV3JpdGVTdHJlYW0iLCJwaXBlIiwiVHVwbGUwIiwicmVhZGFibGUiLCJ3cml0YWJsZSIsImxvZ0J1ZmZlciIsImVuY29kaW5nIiwiY2h1bmsiLCJjb25zb2xlIiwibG9nIiwidG9TdHJpbmciLCJvbiIsImV2ZW50TmFtZSIsInN0cmVhbSIsImFUb1Rhc2siLCJhc3luY0Z1bmN0aW9uIiwiY2FsbGJhY2siLCJtYWtlIiwibG9jYWxSdW50aW1lIiwiZnPDuDEiLCJyZXF1aXJlIiwiVGFza8O4MSIsIkVsbSIsIk5hdGl2ZS5UYXNrLm1ha2UiLCJVdGlsc8O4MSIsIk5hdGl2ZS5VdGlscy5tYWtlIiwiVHVwbGUww7gxIiwiTmF0aXZlLk5vZGUuU3RyZWFtcy5GUy52YWx1ZXMiLCJGMyIsIkYyIiwiTmF0aXZlLk5vZGUuU3RyZWFtcy5GUy5tYWtlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFPQSxRQUFBLEdBQVAsU0FBT0EsUUFBUCxDQUFpQkMsTUFBakIsRTtRQUEwQkMsTUFBQSxHO0lBQ3hCLE9BQUNBLE1BQUEsQ0FBT0MsTUFBUixDQUFlLFVBQUtDLENBQUwsRUFBT0MsS0FBUCxFQUFjO0FBQUEsZSxhQUMzQjtBQUFBLFlBQVVELENBQU4sQ0FBUUMsS0FBUixDQUFKLEcsTUFBQSxHQUFtQ0QsQ0FBTixDQUFRQyxLQUFSLENBQU4sR0FBcUIsRUFBNUM7QUFBQSxZQUNBLE9BQU1ELENBQU4sQ0FBUUMsS0FBUixFQURBO0FBQUEsUyxDQUFBLEVBRDJCO0FBQUEsS0FBN0IsRUFHQUosTUFIQSxFO0NBREY7QUFNQSxJQUFPSyxnQkFBQSxHQUFQLFNBQU9BLGdCQUFQLENBQ0dDLEVBREgsRUFDTUMsSUFETixFQUNZO0FBQUEscUJBQ1RD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SUFBbkIsRUFBc0JFLE1BQXRCLENBSjRCO0FBQUEsZ0IscUJBSzNCckIsaUJBQUQsQ0FBbUJtQixJQUFuQixFQUFzQkUsTUFBdEIsQ0FMNEI7QUFBQSxhQUZyRCxDQURBO0FBQUEsUyxDQUFBLEVBREYsQ0FKQztBQUFBLEssS0FEYyxDLElBQUE7QUFBQSxDQURqQixDQXZDQTtBQXdEQ2hDLFFBQUQsQ0FBVWlDLEdBQVYsRSxRQUFBLEUsTUFBQSxFLFNBQUEsRSxJQUFBLEVBeERBO0FBeURNQSxHQUFBLENBQUlRLDJCQUFWLEdBQXNDYixJQUF0QyIsInNvdXJjZXNDb250ZW50IjpbIihkZWZuLSBzYW5pdGl6ZSBbcmVjb3JkICYgc3BhY2VzXVxuICAoc3BhY2VzLnJlZHVjZSAoZm4gW3Igc3BhY2VdIChkb1xuICAgIChpZiAoYWdldCByIHNwYWNlKSBuaWwgKHNldCEgKGFnZXQgciBzcGFjZSkge30pKVxuICAgIChhZ2V0IHIgc3BhY2UpKSlcbiAgcmVjb3JkKSlcblxuKGRlZm4tIGNyZWF0ZVJlYWRTdHJlYW1cbiAgW2ZzIFRhc2tdIChmblxuICBbcGF0aF1cbiAgKFRhc2suc3VjY2VlZCAoLmNyZWF0ZVJlYWRTdHJlYW0gZnMgcGF0aCkpKSlcblxuKGRlZm4tIGNyZWF0ZVdyaXRlU3RyZWFtXG4gIFtmcyBUYXNrXSAoZm5cbiAgW3BhdGhdXG4gIChUYXNrLnN1Y2NlZWQgKC5jcmVhdGVXcml0ZVN0cmVhbSBmcyBwYXRoKSkpKVxuXG4oZGVmbi0gcGlwZVxuICBbZnMgVGFzayBUdXBsZTBdIChmblxuICBbcmVhZGFibGUgd3JpdGFibGVdXG4gIChkb1xuICAgICgucGlwZSByZWFkYWJsZSB3cml0YWJsZSlcbiAgICAoLnN1Y2NlZWQgVGFzayBUdXBsZTApKSkpXG5cbihkZWZuLSBsb2dCdWZmZXJcbiAgW1Rhc2sgVHVwbGUwXSAoZm5cbiAgW2VuY29kaW5nIGNodW5rXVxuICAoZG9cbiAgICAoLmxvZyBjb25zb2xlIChpZiBjaHVuayAoLnRvU3RyaW5nIGNodW5rIGVuY29kaW5nKSBjaHVuaykpXG4gICAgKC5zdWNjZWVkIFRhc2sgVHVwbGUwKSkpKVxuXG4oZGVmbi0gb25cbiAgW1Rhc2tdIChmblxuICBbZXZlbnROYW1lIHN0cmVhbSBhVG9UYXNrXVxuICAoLmFzeW5jRnVuY3Rpb24gVGFzayAoZm5cbiAgICBbY2FsbGJhY2tdXG4gICAgKC5vbiBzdHJlYW0gZXZlbnROYW1lIChmblxuICAgICAgW2NodW5rXVxuICAgICAgKGNhbGxiYWNrIChhVG9UYXNrIGNodW5rKSkpKSkpKSlcblxuKGRlZm4tIG1ha2VcbiAgW2xvY2FsUnVudGltZV0gKGxldFxuICBbZnMgICAgIChyZXF1aXJlIFwiZnNcIilcbiAgIFRhc2sgICAoRWxtLk5hdGl2ZS5UYXNrLm1ha2UgIGxvY2FsUnVudGltZSlcbiAgIFV0aWxzICAoRWxtLk5hdGl2ZS5VdGlscy5tYWtlIGxvY2FsUnVudGltZSlcbiAgIFR1cGxlMCAoOlR1cGxlMCBVdGlscykgXVxuICAoZG9cbiAgICAoc2FuaXRpemUgbG9jYWxSdW50aW1lIDpOYXRpdmUgOk5vZGUgOlN0cmVhbXMgOkZTKVxuICAgIChpZiBsb2NhbFJ1bnRpbWUuTmF0aXZlLk5vZGUuU3RyZWFtcy5GUy52YWx1ZXNcbiAgICAgICAgbG9jYWxSdW50aW1lLk5hdGl2ZS5Ob2RlLlN0cmVhbXMuRlMudmFsdWVzXG4gICAgICAgIChzZXQhIGxvY2FsUnVudGltZS5OYXRpdmUuTm9kZS5TdHJlYW1zLkZTLnZhbHVlcyB7XG4gICAgICAgICAgOm9uIChGMyAob24gVGFzaykpXG4gICAgICAgICAgOnBpcGUgKEYyIChwaXBlIGZzIFRhc2sgVHVwbGUwKSlcbiAgICAgICAgICA6bG9nQnVmZmVyIChGMiAobG9nQnVmZmVyIFRhc2sgVHVwbGUwKSlcbiAgICAgICAgICA6Y3JlYXRlUmVhZFN0cmVhbSAgKGNyZWF0ZVJlYWRTdHJlYW0gIGZzIFRhc2spXG4gICAgICAgICAgOmNyZWF0ZVdyaXRlU3RyZWFtIChjcmVhdGVXcml0ZVN0cmVhbSBmcyBUYXNrKSB9KSkpKSlcblxuKHNhbml0aXplIEVsbSA6TmF0aXZlIDpOb2RlIDpTdHJlYW1zIDpGUylcbihzZXQhIEVsbS5OYXRpdmUuTm9kZS5TdHJlYW1zLkZTLm1ha2UgbWFrZSlcbiJdfQ==
