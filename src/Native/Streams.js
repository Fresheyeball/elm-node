var sanitize = function sanitize(record) {
    var spaces = Array.prototype.slice.call(arguments, 1);
    return spaces.reduce(function (r, space) {
        return (function () {
            r[space] ? void 0 : r[space] = {};
            return r[space];
        })();
    }, record);
};
var pipe = function pipe(Task, Tuple0) {
    return function (readable, writable) {
        return (function () {
            readable.pipe(writable);
            return Task.succeed(Tuple0);
        })();
    };
};
var copeWithNull = function copeWithNull(encoding) {
    return encoding == 'null' ? null : encoding;
};
var logBuffer = function logBuffer(Task, Tuple0) {
    return function (encoding, chunk) {
        return (function () {
            console.log(chunk ? chunk.toString(codeWithNull(encoding)) : chunk);
            return Task.succeed(Tuple0);
        })();
    };
};
var on = function on(Task) {
    return function (eventName, stream, aToTask) {
        return Task.asyncFunction(function (callback) {
            return stream.on(eventName, function (chunk) {
                return callback(aToTask(chunk));
            });
        });
    };
};
var make = function make(localRuntime) {
    return function () {
        var Taskø1 = Elm.Native.Task.make(localRuntime);
        var Utilsø1 = Elm.Native.Utils.make(localRuntime);
        var Tuple0ø1 = (Utilsø1 || 0)['Tuple0'];
        return (function () {
            sanitize(localRuntime, 'Native', 'Node', 'Streams');
            return localRuntime.Native.Node.Streams.values ? localRuntime.Native.Node.Streams.values : localRuntime.Native.Node.Streams.values = {
                'on': F3(on(Taskø1)),
                'pipe': F2(pipe(Taskø1, Tuple0ø1)),
                'logBuffer': F2(logBuffer(Taskø1, Tuple0ø1))
            };
        })();
    }.call(this);
};
sanitize(Elm, 'Native', 'Node', 'Streams');
Elm.Native.Node.Streams.make = make;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFub255bW91cy53aXNwIl0sIm5hbWVzIjpbInNhbml0aXplIiwicmVjb3JkIiwic3BhY2VzIiwicmVkdWNlIiwiciIsInNwYWNlIiwicGlwZSIsIlRhc2siLCJUdXBsZTAiLCJyZWFkYWJsZSIsIndyaXRhYmxlIiwic3VjY2VlZCIsImNvcGVXaXRoTnVsbCIsImVuY29kaW5nIiwibnVsbCIsImxvZ0J1ZmZlciIsImNodW5rIiwiY29uc29sZSIsImxvZyIsInRvU3RyaW5nIiwiY29kZVdpdGhOdWxsIiwib24iLCJldmVudE5hbWUiLCJzdHJlYW0iLCJhVG9UYXNrIiwiYXN5bmNGdW5jdGlvbiIsImNhbGxiYWNrIiwibWFrZSIsImxvY2FsUnVudGltZSIsIlRhc2vDuDEiLCJFbG0iLCJOYXRpdmUuVGFzay5tYWtlIiwiVXRpbHPDuDEiLCJOYXRpdmUuVXRpbHMubWFrZSIsIlR1cGxlMMO4MSIsIk5hdGl2ZS5Ob2RlLlN0cmVhbXMudmFsdWVzIiwiRjMiLCJGMiIsIk5hdGl2ZS5Ob2RlLlN0cmVhbXMubWFrZSJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBT0EsUUFBQSxHQUFQLFNBQU9BLFFBQVAsQ0FBaUJDLE1BQWpCLEU7UUFBMEJDLE1BQUEsRztJQUN4QixPQUFDQSxNQUFBLENBQU9DLE1BQVIsQ0FBZSxVQUFLQyxDQUFMLEVBQU9DLEtBQVAsRUFBYztBQUFBLGUsYUFDM0I7QUFBQSxZQUFVRCxDQUFOLENBQVFDLEtBQVIsQ0FBSixHLE1BQUEsR0FBbUNELENBQU4sQ0FBUUMsS0FBUixDQUFOLEdBQXFCLEVBQTVDO0FBQUEsWUFDQSxPQUFNRCxDQUFOLENBQVFDLEtBQVIsRUFEQTtBQUFBLFMsQ0FBQSxFQUQyQjtBQUFBLEtBQTdCLEVBR0FKLE1BSEEsRTtDQURGO0FBTUEsSUFBT0ssSUFBQSxHQUFQLFNBQU9BLElBQVAsQ0FDR0MsSUFESCxFQUNRQyxNQURSLEVBQ2dCO0FBQUEscUJBQ2JDLFFBRGEsRUFDSkMsUUFESSxFQUVkO0FBQUEsZSxhQUNFO0FBQUEsWUFBT0QsUUFBTixDQUFDSCxJQUFGLENBQWdCSSxRQUFoQjtBQUFBLFlBQ0EsT0FBVUgsSUFBVCxDQUFDSSxPQUFGLENBQWVILE1BQWYsRUFEQTtBQUFBLFMsQ0FBQSxFQURGO0FBQUEsS0FGYztBQUFBLENBRGhCLENBTkE7QUFhQSxJQUFPSSxZQUFBLEdBQVAsU0FBT0EsWUFBUCxDQUNHQyxRQURILEVBRUU7QUFBQSxXQUFRQSxRQUFKLElBQWEsTUFBakIsR0FBeUJDLElBQXpCLEdBQThCRCxRQUE5QjtBQUFBLENBRkYsQ0FiQTtBQWlCQSxJQUFPRSxTQUFBLEdBQVAsU0FBT0EsU0FBUCxDQUNHUixJQURILEVBQ1FDLE1BRFIsRUFDZ0I7QUFBQSxxQkFDYkssUUFEYSxFQUNKRyxLQURJLEVBQ0c7QUFBQSxlLGFBQ2Y7QUFBQSxZQUFNQyxPQUFMLENBQUNDLEdBQUYsQ0FDTUYsS0FBSixHQUFxQkEsS0FBVixDQUFDRyxRQUFGLENBQWtCQyxZQUFELENBQWNQLFFBQWQsQ0FBakIsQ0FBVixHQUFvREcsS0FEdEQ7QUFBQSxZQUVBLE9BQVVULElBQVQsQ0FBQ0ksT0FBRixDQUFlSCxNQUFmLEVBRkE7QUFBQSxTLENBQUEsRUFEZTtBQUFBLEtBREg7QUFBQSxDQURoQixDQWpCQTtBQXdCQSxJQUFPYSxFQUFBLEdBQVAsU0FBT0EsRUFBUCxDQUNHZCxJQURILEVBQ1M7QUFBQSxxQkFDTmUsU0FETSxFQUNJQyxNQURKLEVBQ1dDLE9BRFgsRUFFUDtBQUFBLGVBQWdCakIsSUFBZixDQUFDa0IsYUFBRixDQUFxQixVQUNsQkMsUUFEa0IsRUFFbkI7QUFBQSxtQkFBS0gsTUFBSixDQUFDRixFQUFGLENBQVlDLFNBQVosRUFBc0IsVUFDbkJOLEtBRG1CLEVBRXBCO0FBQUEsdUJBQUNVLFFBQUQsQ0FBV0YsT0FBRCxDQUFTUixLQUFULENBQVY7QUFBQSxhQUZGO0FBQUEsU0FGRjtBQUFBLEtBRk87QUFBQSxDQURULENBeEJBO0FBaUNBLElBQU9XLElBQUEsR0FBUCxTQUFPQSxJQUFQLENBQ0dDLFlBREgsRUFDaUI7QUFBQSxXLFlBQ2Q7QUFBQSxZQUFBQyxNLEdBQVFDLEdBQUEsQ0FBSUMsZ0JBQUwsQ0FBdUJILFlBQXZCLENBQVA7QUFBQSxRQUNBLElBQUFJLE8sR0FBUUYsR0FBQSxDQUFJRyxpQkFBTCxDQUF1QkwsWUFBdkIsQ0FBUCxDQURBO0FBQUEsUUFFQSxJQUFBTSxRLElBQWdCRixPLE1BQVQsQyxRQUFBLENBQVAsQ0FGQTtBQUFBLFFBR0QsTyxhQUNFO0FBQUEsWUFBQ2hDLFFBQUQsQ0FBVTRCLFlBQVYsRSxRQUFBLEUsTUFBQSxFLFNBQUE7QUFBQSxZQUNBLE9BQUlBLFlBQUEsQ0FBYU8sMEJBQWpCLEdBQ0lQLFlBQUEsQ0FBYU8sMEJBRGpCLEdBRVVQLFlBQUEsQ0FBYU8sMEJBQW5CLEdBQThDO0FBQUEsZ0IsTUFDdkNDLEVBQUQsQ0FBS2YsRUFBRCxDQUFJUSxNQUFKLENBQUosQ0FEd0M7QUFBQSxnQixRQUVyQ1EsRUFBRCxDQUFLL0IsSUFBRCxDQUFNdUIsTUFBTixFQUFXSyxRQUFYLENBQUosQ0FGc0M7QUFBQSxnQixhQUdoQ0csRUFBRCxDQUFLdEIsU0FBRCxDQUFXYyxNQUFYLEVBQWdCSyxRQUFoQixDQUFKLENBSGlDO0FBQUEsYUFGbEQsQ0FEQTtBQUFBLFMsQ0FBQSxFQURGLENBSEM7QUFBQSxLLEtBRGMsQyxJQUFBO0FBQUEsQ0FEakIsQ0FqQ0E7QUErQ0NsQyxRQUFELENBQVU4QixHQUFWLEUsUUFBQSxFLE1BQUEsRSxTQUFBLEVBL0NBO0FBZ0RNQSxHQUFBLENBQUlRLHdCQUFWLEdBQW1DWCxJQUFuQyIsInNvdXJjZXNDb250ZW50IjpbIihkZWZuLSBzYW5pdGl6ZSBbcmVjb3JkICYgc3BhY2VzXVxuICAoc3BhY2VzLnJlZHVjZSAoZm4gW3Igc3BhY2VdIChkb1xuICAgIChpZiAoYWdldCByIHNwYWNlKSBuaWwgKHNldCEgKGFnZXQgciBzcGFjZSkge30pKVxuICAgIChhZ2V0IHIgc3BhY2UpKSlcbiAgcmVjb3JkKSlcblxuKGRlZm4tIHBpcGVcbiAgW1Rhc2sgVHVwbGUwXSAoZm5cbiAgW3JlYWRhYmxlIHdyaXRhYmxlXVxuICAoZG9cbiAgICAoLnBpcGUgcmVhZGFibGUgd3JpdGFibGUpXG4gICAgKC5zdWNjZWVkIFRhc2sgVHVwbGUwKSkpKVxuXG4oZGVmbi0gY29wZVdpdGhOdWxsXG4gIFtlbmNvZGluZ11cbiAgKGlmICg9PSBlbmNvZGluZyBcIm51bGxcIikgbnVsbCBlbmNvZGluZykpXG5cbihkZWZuLSBsb2dCdWZmZXJcbiAgW1Rhc2sgVHVwbGUwXSAoZm5cbiAgW2VuY29kaW5nIGNodW5rXSAoZG9cbiAgICAoLmxvZyBjb25zb2xlXG4gICAgICAoaWYgY2h1bmsgKC50b1N0cmluZyBjaHVuayAoY29kZVdpdGhOdWxsIGVuY29kaW5nKSkgY2h1bmspKVxuICAgICguc3VjY2VlZCBUYXNrIFR1cGxlMCkpKSlcblxuKGRlZm4tIG9uXG4gIFtUYXNrXSAoZm5cbiAgW2V2ZW50TmFtZSBzdHJlYW0gYVRvVGFza11cbiAgKC5hc3luY0Z1bmN0aW9uIFRhc2sgKGZuXG4gICAgW2NhbGxiYWNrXVxuICAgICgub24gc3RyZWFtIGV2ZW50TmFtZSAoZm5cbiAgICAgIFtjaHVua11cbiAgICAgIChjYWxsYmFjayAoYVRvVGFzayBjaHVuaykpKSkpKSkpXG5cbihkZWZuLSBtYWtlXG4gIFtsb2NhbFJ1bnRpbWVdIChsZXRcbiAgW1Rhc2sgICAoRWxtLk5hdGl2ZS5UYXNrLm1ha2UgIGxvY2FsUnVudGltZSlcbiAgIFV0aWxzICAoRWxtLk5hdGl2ZS5VdGlscy5tYWtlIGxvY2FsUnVudGltZSlcbiAgIFR1cGxlMCAoOlR1cGxlMCBVdGlscykgXVxuICAoZG9cbiAgICAoc2FuaXRpemUgbG9jYWxSdW50aW1lIDpOYXRpdmUgOk5vZGUgOlN0cmVhbXMpXG4gICAgKGlmIGxvY2FsUnVudGltZS5OYXRpdmUuTm9kZS5TdHJlYW1zLnZhbHVlc1xuICAgICAgICBsb2NhbFJ1bnRpbWUuTmF0aXZlLk5vZGUuU3RyZWFtcy52YWx1ZXNcbiAgICAgICAgKHNldCEgbG9jYWxSdW50aW1lLk5hdGl2ZS5Ob2RlLlN0cmVhbXMudmFsdWVzIHtcbiAgICAgICAgICA6b24gKEYzIChvbiBUYXNrKSlcbiAgICAgICAgICA6cGlwZSAoRjIgKHBpcGUgVGFzayBUdXBsZTApKVxuICAgICAgICAgIDpsb2dCdWZmZXIgKEYyIChsb2dCdWZmZXIgVGFzayBUdXBsZTApKSB9KSkpKSlcblxuKHNhbml0aXplIEVsbSA6TmF0aXZlIDpOb2RlIDpTdHJlYW1zKVxuKHNldCEgRWxtLk5hdGl2ZS5Ob2RlLlN0cmVhbXMubWFrZSBtYWtlKVxuIl19
