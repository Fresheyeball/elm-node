var make = function make(localRuntime) {
    return function () {
        var Taskø1 = Elm.Native.Task.make(localRuntime);
        var Utilsø1 = Elm.Native.Utils.make(localRuntime);
        var Signalø1 = Elm.Native.Signal.make(localRuntime);
        var Tuple0ø1 = (Utilsø1 || 0)['Tuple0'];
        return (function () {
            sanitize(localRuntime, 'Native', 'Streams');
            return localRuntime.Native.Streams.values ? localRuntime.Native.Streams.values : localRuntime.Native.Streams.values = {
                'bufferToString': F2(function (encoding, chunk) {
                    return Taskø1.asyncFunction(function (callback) {
                        return callback(Taskø1.succeed(chunk ? chunk.ctor == 'BufferEmpty' ? '' : chunk.toString(encoding) : void 0));
                    });
                }),
                'on': F5(function (Left, Right, eventName, stream, f) {
                    return Taskø1.asyncFunction(function (callback) {
                        return (function () {
                            stream.on(eventName, function (chunk) {
                                return Taskø1.perform(f(typeof(chunk) == 'string' ? Left(chunk) : Right(chunk)));
                            });
                            return Taskø1.succeed(Tuple0ø1);
                        })();
                    });
                }),
                'isPaused': oo.get0('isPaused', Taskø1),
                'pause': oo.method0('pause', Taskø1, Tuple0ø1),
                'pipe': F2(oo.method2('pipe', Taskø1, Tuple0ø1)),
                'read': F5(function (Left, Right, Just, Nothing, stream) {
                    return Taskø1.succeed(function () {
                        var xø1 = stream.read();
                        return xø1 ? Just('string' == typeof(xø1) ? Left(xø1) : Right(xø1)) : Nothing;
                    }.call(this));
                }),
                'readSize': F6(function (Left, Right, Just, Nothing, stream, size) {
                    return Taskø1.succeed(function () {
                        var xø1 = stream.read(size);
                        return xø1 ? Just('string' == typeof(xø1) ? Left(xø1) : Right(xø1)) : Nothing;
                    }.call(this));
                }),
                'resume': oo.method0('resume', Taskø1, Tuple0ø1),
                'setEncoding': F2(oo.method1('setEncoding', Taskø1, Tuple0ø1)),
                'unpipe': F2(oo.method1('unpipe', Taskø1, Tuple0ø1)),
                'unpipeAll': oo.method0('unpipe', Taskø1, Tuple0ø1),
                'unshift': F2(oo.method1('unshift', Taskø1, Tuple0ø1)),
                'cork': oo.method0('cork', Taskø1, Tuple0ø1),
                'endString': F3(oo.method2cb('end', Taskø1, Tuple0ø1)),
                'endBuffer': F2(oo.method1cb('end', Taskø1, Tuple0ø1)),
                'setDefaultEncoding': F2(oo.method1('setDefaultEncoding', Taskø1, Tuple0ø1)),
                'uncork': oo.method0('uncork', Taskø1, Tuple0ø1),
                'writeString': F2(oo.method1cb('write', Taskø1, Tuple0ø1)),
                'writeBuffer': F3(oo.method2cb('write', Taskø1, Tuple0ø1)),
                'writeStringSignal': F3(function (encoding, signal, stream) {
                    return (function () {
                        Signalø1.output('write-stream-buffer', function (chunk) {
                            return chunk ? stream.write(chunk, encoding) : void 0;
                        }, signal);
                        return Taskø1.succeed(Tuple0ø1);
                    })();
                }),
                'writeBufferSignal': F2(function (signal, stream) {
                    return (function () {
                        Signalø1.output('write-stream-buffer', function (chunk) {
                            return chunk ? stream.write(chunk) : void 0;
                        }, signal);
                        return Taskø1.succeed(Tuple0ø1);
                    })();
                })
            };
        })();
    }.call(this);
};
sanitize(Elm, 'Native', 'Streams');
Elm.Native.Streams.make = make;
//# sourceMappingURL=data:application/json;base64,
