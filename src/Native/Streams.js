var sanitize = function sanitize(record) {
    var spaces = Array.prototype.slice.call(arguments, 1);
    return spaces.reduce(function (r, space) {
        return (function () {
            r[space] ? void 0 : r[space] = {};
            return r[space];
        })();
    }, record);
};
var pipe = function pipe(Task, Tuple0) {
    return function (readable, writable) {
        return (function () {
            readable.pipe(writable);
            return Task.succeed(Tuple0);
        })();
    };
};
var logBuffer = function logBuffer(Task, Tuple0) {
    return function (encoding, chunk) {
        return (function () {
            console.log(chunk ? chunk.toString(encoding) : chunk);
            return Task.succeed(Tuple0);
        })();
    };
};
var on = function on(Task, Tuple0) {
    return function (eventName, stream, aToTask) {
        return (function () {
            stream.on(eventName, function (chunk) {
                return Task.perform(aToTask(chunk));
            });
            return Task.succeed(Tuple0);
        })();
    };
};
var make = function make(localRuntime) {
    return function () {
        var Taskø1 = Elm.Native.Task.make(localRuntime);
        var Utilsø1 = Elm.Native.Utils.make(localRuntime);
        var Tuple0ø1 = (Utilsø1 || 0)['Tuple0'];
        return (function () {
            sanitize(localRuntime, 'Native', 'Streams');
            return localRuntime.Native.Streams.values ? localRuntime.Native.Streams.values : localRuntime.Native.Streams.values = {
                'on': F3(on(Taskø1, Tuple0ø1)),
                'pipe': F2(pipe(Taskø1, Tuple0ø1)),
                'logBuffer': F2(logBuffer(Taskø1, Tuple0ø1))
            };
        })();
    }.call(this);
};
sanitize(Elm, 'Native', 'Streams');
Elm.Native.Streams.make = make;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFub255bW91cy53aXNwIl0sIm5hbWVzIjpbInNhbml0aXplIiwicmVjb3JkIiwic3BhY2VzIiwicmVkdWNlIiwiciIsInNwYWNlIiwicGlwZSIsIlRhc2siLCJUdXBsZTAiLCJyZWFkYWJsZSIsIndyaXRhYmxlIiwic3VjY2VlZCIsImxvZ0J1ZmZlciIsImVuY29kaW5nIiwiY2h1bmsiLCJjb25zb2xlIiwibG9nIiwidG9TdHJpbmciLCJvbiIsImV2ZW50TmFtZSIsInN0cmVhbSIsImFUb1Rhc2siLCJwZXJmb3JtIiwibWFrZSIsImxvY2FsUnVudGltZSIsIlRhc2vDuDEiLCJFbG0iLCJOYXRpdmUuVGFzay5tYWtlIiwiVXRpbHPDuDEiLCJOYXRpdmUuVXRpbHMubWFrZSIsIlR1cGxlMMO4MSIsIk5hdGl2ZS5TdHJlYW1zLnZhbHVlcyIsIkYzIiwiRjIiLCJOYXRpdmUuU3RyZWFtcy5tYWtlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFPQSxRQUFBLEdBQVAsU0FBT0EsUUFBUCxDQUFpQkMsTUFBakIsRTtRQUEwQkMsTUFBQSxHO0lBQ3hCLE9BQUNBLE1BQUEsQ0FBT0MsTUFBUixDQUFlLFVBQUtDLENBQUwsRUFBT0MsS0FBUCxFQUFjO0FBQUEsZSxhQUMzQjtBQUFBLFlBQVVELENBQU4sQ0FBUUMsS0FBUixDQUFKLEcsTUFBQSxHQUFtQ0QsQ0FBTixDQUFRQyxLQUFSLENBQU4sR0FBcUIsRUFBNUM7QUFBQSxZQUNBLE9BQU1ELENBQU4sQ0FBUUMsS0FBUixFQURBO0FBQUEsUyxDQUFBLEVBRDJCO0FBQUEsS0FBN0IsRUFHQUosTUFIQSxFO0NBREY7QUFNQSxJQUFPSyxJQUFBLEdBQVAsU0FBT0EsSUFBUCxDQUNHQyxJQURILEVBQ1FDLE1BRFIsRUFDZ0I7QUFBQSxxQkFDYkMsUUFEYSxFQUNKQyxRQURJLEVBQ007QUFBQSxlLGFBQ2xCO0FBQUEsWUFBT0QsUUFBTixDQUFDSCxJQUFGLENBQWdCSSxRQUFoQjtBQUFBLFlBQ0EsT0FBVUgsSUFBVCxDQUFDSSxPQUFGLENBQWVILE1BQWYsRUFEQTtBQUFBLFMsQ0FBQSxFQURrQjtBQUFBLEtBRE47QUFBQSxDQURoQixDQU5BO0FBWUEsSUFBT0ksU0FBQSxHQUFQLFNBQU9BLFNBQVAsQ0FDR0wsSUFESCxFQUNRQyxNQURSLEVBQ2dCO0FBQUEscUJBQ2JLLFFBRGEsRUFDSkMsS0FESSxFQUNHO0FBQUEsZSxhQUNmO0FBQUEsWUFBTUMsT0FBTCxDQUFDQyxHQUFGLENBQ01GLEtBQUosR0FBcUJBLEtBQVYsQ0FBQ0csUUFBRixDQUFpQkosUUFBakIsQ0FBVixHQUFxQ0MsS0FEdkM7QUFBQSxZQUVBLE9BQVVQLElBQVQsQ0FBQ0ksT0FBRixDQUFlSCxNQUFmLEVBRkE7QUFBQSxTLENBQUEsRUFEZTtBQUFBLEtBREg7QUFBQSxDQURoQixDQVpBO0FBbUJBLElBQU9VLEVBQUEsR0FBUCxTQUFPQSxFQUFQLENBQ0dYLElBREgsRUFDUUMsTUFEUixFQUNnQjtBQUFBLHFCQUNiVyxTQURhLEVBQ0hDLE1BREcsRUFDSUMsT0FESixFQUVkO0FBQUEsZSxhQUNFO0FBQUEsWUFBS0QsTUFBSixDQUFDRixFQUFGLENBQVlDLFNBQVosRUFBc0IsVUFDbkJMLEtBRG1CLEVBRXBCO0FBQUEsdUJBQVVQLElBQVQsQ0FBQ2UsT0FBRixDQUFnQkQsT0FBRCxDQUFTUCxLQUFULENBQWY7QUFBQSxhQUZGO0FBQUEsWUFHQSxPQUFVUCxJQUFULENBQUNJLE9BQUYsQ0FBZUgsTUFBZixFQUhBO0FBQUEsUyxDQUFBLEVBREY7QUFBQSxLQUZjO0FBQUEsQ0FEaEIsQ0FuQkE7QUE0QkEsSUFBT2UsSUFBQSxHQUFQLFNBQU9BLElBQVAsQ0FDR0MsWUFESCxFQUNpQjtBQUFBLFcsWUFDZDtBQUFBLFlBQUFDLE0sR0FBUUMsR0FBQSxDQUFJQyxnQkFBTCxDQUF1QkgsWUFBdkIsQ0FBUDtBQUFBLFFBQ0EsSUFBQUksTyxHQUFRRixHQUFBLENBQUlHLGlCQUFMLENBQXVCTCxZQUF2QixDQUFQLENBREE7QUFBQSxRQUVBLElBQUFNLFEsSUFBZ0JGLE8sTUFBVCxDLFFBQUEsQ0FBUCxDQUZBO0FBQUEsUUFHRCxPLGFBQ0U7QUFBQSxZQUFDNUIsUUFBRCxDQUFVd0IsWUFBVixFLFFBQUEsRSxTQUFBO0FBQUEsWUFDQSxPQUFJQSxZQUFBLENBQWFPLHFCQUFqQixHQUNJUCxZQUFBLENBQWFPLHFCQURqQixHQUVVUCxZQUFBLENBQWFPLHFCQUFuQixHQUF5QztBQUFBLGdCLE1BQzNCQyxFQUFELENBQUtkLEVBQUQsQ0FBV08sTUFBWCxFQUFnQkssUUFBaEIsQ0FBSixDQUQ0QjtBQUFBLGdCLFFBRTNCRyxFQUFELENBQUszQixJQUFELENBQVdtQixNQUFYLEVBQWdCSyxRQUFoQixDQUFKLENBRjRCO0FBQUEsZ0IsYUFHM0JHLEVBQUQsQ0FBS3JCLFNBQUQsQ0FBV2EsTUFBWCxFQUFnQkssUUFBaEIsQ0FBSixDQUg0QjtBQUFBLGFBRjdDLENBREE7QUFBQSxTLENBQUEsRUFERixDQUhDO0FBQUEsSyxLQURjLEMsSUFBQTtBQUFBLENBRGpCLENBNUJBO0FBMENDOUIsUUFBRCxDQUFVMEIsR0FBVixFLFFBQUEsRSxTQUFBLEVBMUNBO0FBMkNNQSxHQUFBLENBQUlRLG1CQUFWLEdBQThCWCxJQUE5QiIsInNvdXJjZXNDb250ZW50IjpbIihkZWZuLSBzYW5pdGl6ZSBbcmVjb3JkICYgc3BhY2VzXVxuICAoc3BhY2VzLnJlZHVjZSAoZm4gW3Igc3BhY2VdIChkb1xuICAgIChpZiAoYWdldCByIHNwYWNlKSBuaWwgKHNldCEgKGFnZXQgciBzcGFjZSkge30pKVxuICAgIChhZ2V0IHIgc3BhY2UpKSlcbiAgcmVjb3JkKSlcblxuKGRlZm4tIHBpcGVcbiAgW1Rhc2sgVHVwbGUwXSAoZm5cbiAgW3JlYWRhYmxlIHdyaXRhYmxlXSAoZG9cbiAgICAoLnBpcGUgcmVhZGFibGUgd3JpdGFibGUpXG4gICAgKC5zdWNjZWVkIFRhc2sgVHVwbGUwKSkpKVxuXG4oZGVmbi0gbG9nQnVmZmVyXG4gIFtUYXNrIFR1cGxlMF0gKGZuXG4gIFtlbmNvZGluZyBjaHVua10gKGRvXG4gICAgKC5sb2cgY29uc29sZVxuICAgICAgKGlmIGNodW5rICgudG9TdHJpbmcgY2h1bmsgZW5jb2RpbmcpIGNodW5rKSlcbiAgICAoLnN1Y2NlZWQgVGFzayBUdXBsZTApKSkpXG5cbihkZWZuLSBvblxuICBbVGFzayBUdXBsZTBdIChmblxuICBbZXZlbnROYW1lIHN0cmVhbSBhVG9UYXNrXVxuICAoZG9cbiAgICAoLm9uIHN0cmVhbSBldmVudE5hbWUgKGZuXG4gICAgICBbY2h1bmtdXG4gICAgICAoLnBlcmZvcm0gVGFzayAoYVRvVGFzayBjaHVuaykpKSlcbiAgICAoLnN1Y2NlZWQgVGFzayBUdXBsZTApKSkpXG5cbihkZWZuLSBtYWtlXG4gIFtsb2NhbFJ1bnRpbWVdIChsZXRcbiAgW1Rhc2sgICAoRWxtLk5hdGl2ZS5UYXNrLm1ha2UgIGxvY2FsUnVudGltZSlcbiAgIFV0aWxzICAoRWxtLk5hdGl2ZS5VdGlscy5tYWtlIGxvY2FsUnVudGltZSlcbiAgIFR1cGxlMCAoOlR1cGxlMCBVdGlscykgXVxuICAoZG9cbiAgICAoc2FuaXRpemUgbG9jYWxSdW50aW1lIDpOYXRpdmUgOlN0cmVhbXMpXG4gICAgKGlmIGxvY2FsUnVudGltZS5OYXRpdmUuU3RyZWFtcy52YWx1ZXNcbiAgICAgICAgbG9jYWxSdW50aW1lLk5hdGl2ZS5TdHJlYW1zLnZhbHVlc1xuICAgICAgICAoc2V0ISBsb2NhbFJ1bnRpbWUuTmF0aXZlLlN0cmVhbXMudmFsdWVzIHtcbiAgICAgICAgICA6b24gICAgICAgIChGMyAob24gICAgICAgIFRhc2sgVHVwbGUwKSlcbiAgICAgICAgICA6cGlwZSAgICAgIChGMiAocGlwZSAgICAgIFRhc2sgVHVwbGUwKSlcbiAgICAgICAgICA6bG9nQnVmZmVyIChGMiAobG9nQnVmZmVyIFRhc2sgVHVwbGUwKSkgfSkpKSkpXG5cbihzYW5pdGl6ZSBFbG0gOk5hdGl2ZSA6U3RyZWFtcylcbihzZXQhIEVsbS5OYXRpdmUuU3RyZWFtcy5tYWtlIG1ha2UpXG4iXX0=
