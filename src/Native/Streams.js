var sanitize = function sanitize(record) {
    var spaces = Array.prototype.slice.call(arguments, 1);
    return spaces.reduce(function (r, space) {
        return (function () {
            r[space] ? void 0 : r[space] = {};
            return r[space];
        })();
    }, record);
};
var pipe = function pipe(Task, Tuple0) {
    return function (readable, writable) {
        return (function () {
            readable.pipe(writable);
            return Task.succeed(Tuple0);
        })();
    };
};
var logBuffer = function logBuffer(Task, Tuple0) {
    return function (encoding, chunk) {
        return (function () {
            console.log(chunk ? chunk.toString(encoding) : chunk);
            return Task.succeed(Tuple0);
        })();
    };
};
var on = function on(Task) {
    return function (eventName, stream, aToTask) {
        return Task.asyncFunction(function (callback) {
            return stream.on(eventName, function (chunk) {
                return callback(aToTask(chunk));
            });
        });
    };
};
var make = function make(localRuntime) {
    return function () {
        var Taskø1 = Elm.Native.Task.make(localRuntime);
        var Utilsø1 = Elm.Native.Utils.make(localRuntime);
        var Tuple0ø1 = (Utilsø1 || 0)['Tuple0'];
        return (function () {
            sanitize(localRuntime, 'Native', 'Streams');
            return localRuntime.Native.Streams.values ? localRuntime.Native.Streams.values : localRuntime.Native.Streams.values = {
                'on': F3(on(Taskø1)),
                'pipe': F2(pipe(Taskø1, Tuple0ø1)),
                'logBuffer': F2(logBuffer(Taskø1, Tuple0ø1))
            };
        })();
    }.call(this);
};
sanitize(Elm, 'Native', 'Streams');
Elm.Native.Streams.make = make;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFub255bW91cy53aXNwIl0sIm5hbWVzIjpbInNhbml0aXplIiwicmVjb3JkIiwic3BhY2VzIiwicmVkdWNlIiwiciIsInNwYWNlIiwicGlwZSIsIlRhc2siLCJUdXBsZTAiLCJyZWFkYWJsZSIsIndyaXRhYmxlIiwic3VjY2VlZCIsImxvZ0J1ZmZlciIsImVuY29kaW5nIiwiY2h1bmsiLCJjb25zb2xlIiwibG9nIiwidG9TdHJpbmciLCJvbiIsImV2ZW50TmFtZSIsInN0cmVhbSIsImFUb1Rhc2siLCJhc3luY0Z1bmN0aW9uIiwiY2FsbGJhY2siLCJtYWtlIiwibG9jYWxSdW50aW1lIiwiVGFza8O4MSIsIkVsbSIsIk5hdGl2ZS5UYXNrLm1ha2UiLCJVdGlsc8O4MSIsIk5hdGl2ZS5VdGlscy5tYWtlIiwiVHVwbGUww7gxIiwiTmF0aXZlLlN0cmVhbXMudmFsdWVzIiwiRjMiLCJGMiIsIk5hdGl2ZS5TdHJlYW1zLm1ha2UiXSwibWFwcGluZ3MiOiJBQUFBLElBQU9BLFFBQUEsR0FBUCxTQUFPQSxRQUFQLENBQWlCQyxNQUFqQixFO1FBQTBCQyxNQUFBLEc7SUFDeEIsT0FBQ0EsTUFBQSxDQUFPQyxNQUFSLENBQWUsVUFBS0MsQ0FBTCxFQUFPQyxLQUFQLEVBQWM7QUFBQSxlLGFBQzNCO0FBQUEsWUFBVUQsQ0FBTixDQUFRQyxLQUFSLENBQUosRyxNQUFBLEdBQW1DRCxDQUFOLENBQVFDLEtBQVIsQ0FBTixHQUFxQixFQUE1QztBQUFBLFlBQ0EsT0FBTUQsQ0FBTixDQUFRQyxLQUFSLEVBREE7QUFBQSxTLENBQUEsRUFEMkI7QUFBQSxLQUE3QixFQUdBSixNQUhBLEU7Q0FERjtBQU1BLElBQU9LLElBQUEsR0FBUCxTQUFPQSxJQUFQLENBQ0dDLElBREgsRUFDUUMsTUFEUixFQUNnQjtBQUFBLHFCQUNiQyxRQURhLEVBQ0pDLFFBREksRUFDTTtBQUFBLGUsYUFDbEI7QUFBQSxZQUFPRCxRQUFOLENBQUNILElBQUYsQ0FBZ0JJLFFBQWhCO0FBQUEsWUFDQSxPQUFVSCxJQUFULENBQUNJLE9BQUYsQ0FBZUgsTUFBZixFQURBO0FBQUEsUyxDQUFBLEVBRGtCO0FBQUEsS0FETjtBQUFBLENBRGhCLENBTkE7QUFZQSxJQUFPSSxTQUFBLEdBQVAsU0FBT0EsU0FBUCxDQUNHTCxJQURILEVBQ1FDLE1BRFIsRUFDZ0I7QUFBQSxxQkFDYkssUUFEYSxFQUNKQyxLQURJLEVBQ0c7QUFBQSxlLGFBQ2Y7QUFBQSxZQUFNQyxPQUFMLENBQUNDLEdBQUYsQ0FDTUYsS0FBSixHQUFxQkEsS0FBVixDQUFDRyxRQUFGLENBQWlCSixRQUFqQixDQUFWLEdBQXFDQyxLQUR2QztBQUFBLFlBRUEsT0FBVVAsSUFBVCxDQUFDSSxPQUFGLENBQWVILE1BQWYsRUFGQTtBQUFBLFMsQ0FBQSxFQURlO0FBQUEsS0FESDtBQUFBLENBRGhCLENBWkE7QUFtQkEsSUFBT1UsRUFBQSxHQUFQLFNBQU9BLEVBQVAsQ0FDR1gsSUFESCxFQUNTO0FBQUEscUJBQ05ZLFNBRE0sRUFDSUMsTUFESixFQUNXQyxPQURYLEVBRVA7QUFBQSxlQUFnQmQsSUFBZixDQUFDZSxhQUFGLENBQXFCLFVBQ2xCQyxRQURrQixFQUVuQjtBQUFBLG1CQUFLSCxNQUFKLENBQUNGLEVBQUYsQ0FBWUMsU0FBWixFQUFzQixVQUNuQkwsS0FEbUIsRUFFcEI7QUFBQSx1QkFBQ1MsUUFBRCxDQUFXRixPQUFELENBQVNQLEtBQVQsQ0FBVjtBQUFBLGFBRkY7QUFBQSxTQUZGO0FBQUEsS0FGTztBQUFBLENBRFQsQ0FuQkE7QUE0QkEsSUFBT1UsSUFBQSxHQUFQLFNBQU9BLElBQVAsQ0FDR0MsWUFESCxFQUNpQjtBQUFBLFcsWUFDZDtBQUFBLFlBQUFDLE0sR0FBUUMsR0FBQSxDQUFJQyxnQkFBTCxDQUF1QkgsWUFBdkIsQ0FBUDtBQUFBLFFBQ0EsSUFBQUksTyxHQUFRRixHQUFBLENBQUlHLGlCQUFMLENBQXVCTCxZQUF2QixDQUFQLENBREE7QUFBQSxRQUVBLElBQUFNLFEsSUFBZ0JGLE8sTUFBVCxDLFFBQUEsQ0FBUCxDQUZBO0FBQUEsUUFHRCxPLGFBQ0U7QUFBQSxZQUFDN0IsUUFBRCxDQUFVeUIsWUFBVixFLFFBQUEsRSxTQUFBO0FBQUEsWUFDQSxPQUFJQSxZQUFBLENBQWFPLHFCQUFqQixHQUNJUCxZQUFBLENBQWFPLHFCQURqQixHQUVVUCxZQUFBLENBQWFPLHFCQUFuQixHQUF5QztBQUFBLGdCLE1BQ2xDQyxFQUFELENBQUtmLEVBQUQsQ0FBSVEsTUFBSixDQUFKLENBRG1DO0FBQUEsZ0IsUUFFaENRLEVBQUQsQ0FBSzVCLElBQUQsQ0FBTW9CLE1BQU4sRUFBV0ssUUFBWCxDQUFKLENBRmlDO0FBQUEsZ0IsYUFHM0JHLEVBQUQsQ0FBS3RCLFNBQUQsQ0FBV2MsTUFBWCxFQUFnQkssUUFBaEIsQ0FBSixDQUg0QjtBQUFBLGFBRjdDLENBREE7QUFBQSxTLENBQUEsRUFERixDQUhDO0FBQUEsSyxLQURjLEMsSUFBQTtBQUFBLENBRGpCLENBNUJBO0FBMENDL0IsUUFBRCxDQUFVMkIsR0FBVixFLFFBQUEsRSxTQUFBLEVBMUNBO0FBMkNNQSxHQUFBLENBQUlRLG1CQUFWLEdBQThCWCxJQUE5QiIsInNvdXJjZXNDb250ZW50IjpbIihkZWZuLSBzYW5pdGl6ZSBbcmVjb3JkICYgc3BhY2VzXVxuICAoc3BhY2VzLnJlZHVjZSAoZm4gW3Igc3BhY2VdIChkb1xuICAgIChpZiAoYWdldCByIHNwYWNlKSBuaWwgKHNldCEgKGFnZXQgciBzcGFjZSkge30pKVxuICAgIChhZ2V0IHIgc3BhY2UpKSlcbiAgcmVjb3JkKSlcblxuKGRlZm4tIHBpcGVcbiAgW1Rhc2sgVHVwbGUwXSAoZm5cbiAgW3JlYWRhYmxlIHdyaXRhYmxlXSAoZG9cbiAgICAoLnBpcGUgcmVhZGFibGUgd3JpdGFibGUpXG4gICAgKC5zdWNjZWVkIFRhc2sgVHVwbGUwKSkpKVxuXG4oZGVmbi0gbG9nQnVmZmVyXG4gIFtUYXNrIFR1cGxlMF0gKGZuXG4gIFtlbmNvZGluZyBjaHVua10gKGRvXG4gICAgKC5sb2cgY29uc29sZVxuICAgICAgKGlmIGNodW5rICgudG9TdHJpbmcgY2h1bmsgZW5jb2RpbmcpIGNodW5rKSlcbiAgICAoLnN1Y2NlZWQgVGFzayBUdXBsZTApKSkpXG5cbihkZWZuLSBvblxuICBbVGFza10gKGZuXG4gIFtldmVudE5hbWUgc3RyZWFtIGFUb1Rhc2tdXG4gICguYXN5bmNGdW5jdGlvbiBUYXNrIChmblxuICAgIFtjYWxsYmFja11cbiAgICAoLm9uIHN0cmVhbSBldmVudE5hbWUgKGZuXG4gICAgICBbY2h1bmtdXG4gICAgICAoY2FsbGJhY2sgKGFUb1Rhc2sgY2h1bmspKSkpKSkpKVxuXG4oZGVmbi0gbWFrZVxuICBbbG9jYWxSdW50aW1lXSAobGV0XG4gIFtUYXNrICAgKEVsbS5OYXRpdmUuVGFzay5tYWtlICBsb2NhbFJ1bnRpbWUpXG4gICBVdGlscyAgKEVsbS5OYXRpdmUuVXRpbHMubWFrZSBsb2NhbFJ1bnRpbWUpXG4gICBUdXBsZTAgKDpUdXBsZTAgVXRpbHMpIF1cbiAgKGRvXG4gICAgKHNhbml0aXplIGxvY2FsUnVudGltZSA6TmF0aXZlIDpTdHJlYW1zKVxuICAgIChpZiBsb2NhbFJ1bnRpbWUuTmF0aXZlLlN0cmVhbXMudmFsdWVzXG4gICAgICAgIGxvY2FsUnVudGltZS5OYXRpdmUuU3RyZWFtcy52YWx1ZXNcbiAgICAgICAgKHNldCEgbG9jYWxSdW50aW1lLk5hdGl2ZS5TdHJlYW1zLnZhbHVlcyB7XG4gICAgICAgICAgOm9uIChGMyAob24gVGFzaykpXG4gICAgICAgICAgOnBpcGUgKEYyIChwaXBlIFRhc2sgVHVwbGUwKSlcbiAgICAgICAgICA6bG9nQnVmZmVyIChGMiAobG9nQnVmZmVyIFRhc2sgVHVwbGUwKSkgfSkpKSkpXG5cbihzYW5pdGl6ZSBFbG0gOk5hdGl2ZSA6U3RyZWFtcylcbihzZXQhIEVsbS5OYXRpdmUuU3RyZWFtcy5tYWtlIG1ha2UpXG4iXX0=
