var sanitize = function sanitize(record) {
    var spaces = Array.prototype.slice.call(arguments, 1);
    return spaces.reduce(function (r, space) {
        return (function () {
            r[space] ? void 0 : r[space] = {};
            return r[space];
        })();
    }, record);
};
var pipe = function pipe(Task, Tuple0) {
    return function (readable, writable) {
        return (function () {
            readable.pipe(writable);
            return Task.succeed(Tuple0);
        })();
    };
};
var logBuffer = function logBuffer(Task, Tuple0) {
    return function (encoding, chunk) {
        return (function () {
            console.log(chunk ? chunk.toString(encoding) : chunk);
            return Task.succeed(Tuple0);
        })();
    };
};
var on = function on(Task) {
    return function (eventName, stream, aToTask) {
        return Task.asyncFunction(function (callback) {
            return stream.on(eventName, function (chunk) {
                return callback(aToTask(chunk));
            });
        });
    };
};
var make = function make(localRuntime) {
    return function () {
        var Taskø1 = Elm.Native.Task.make(localRuntime);
        var Utilsø1 = Elm.Native.Utils.make(localRuntime);
        var Tuple0ø1 = (Utilsø1 || 0)['Tuple0'];
        return (function () {
            sanitize(localRuntime, 'Native', 'Node', 'Streams');
            return localRuntime.Native.Node.Streams.values ? localRuntime.Native.Node.Streams.values : localRuntime.Native.Node.Streams.values = {
                'on': F3(on(Taskø1)),
                'pipe': F2(pipe(Taskø1, Tuple0ø1)),
                'logBuffer': F2(logBuffer(Taskø1, Tuple0ø1))
            };
        })();
    }.call(this);
};
sanitize(Elm, 'Native', 'Node', 'Streams');
Elm.Native.Node.Streams.make = make;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFub255bW91cy53aXNwIl0sIm5hbWVzIjpbInNhbml0aXplIiwicmVjb3JkIiwic3BhY2VzIiwicmVkdWNlIiwiciIsInNwYWNlIiwicGlwZSIsIlRhc2siLCJUdXBsZTAiLCJyZWFkYWJsZSIsIndyaXRhYmxlIiwic3VjY2VlZCIsImxvZ0J1ZmZlciIsImVuY29kaW5nIiwiY2h1bmsiLCJjb25zb2xlIiwibG9nIiwidG9TdHJpbmciLCJvbiIsImV2ZW50TmFtZSIsInN0cmVhbSIsImFUb1Rhc2siLCJhc3luY0Z1bmN0aW9uIiwiY2FsbGJhY2siLCJtYWtlIiwibG9jYWxSdW50aW1lIiwiVGFza8O4MSIsIkVsbSIsIk5hdGl2ZS5UYXNrLm1ha2UiLCJVdGlsc8O4MSIsIk5hdGl2ZS5VdGlscy5tYWtlIiwiVHVwbGUww7gxIiwiTmF0aXZlLk5vZGUuU3RyZWFtcy52YWx1ZXMiLCJGMyIsIkYyIiwiTmF0aXZlLk5vZGUuU3RyZWFtcy5tYWtlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFPQSxRQUFBLEdBQVAsU0FBT0EsUUFBUCxDQUFpQkMsTUFBakIsRTtRQUEwQkMsTUFBQSxHO0lBQ3hCLE9BQUNBLE1BQUEsQ0FBT0MsTUFBUixDQUFlLFVBQUtDLENBQUwsRUFBT0MsS0FBUCxFQUFjO0FBQUEsZSxhQUMzQjtBQUFBLFlBQVVELENBQU4sQ0FBUUMsS0FBUixDQUFKLEcsTUFBQSxHQUFtQ0QsQ0FBTixDQUFRQyxLQUFSLENBQU4sR0FBcUIsRUFBNUM7QUFBQSxZQUNBLE9BQU1ELENBQU4sQ0FBUUMsS0FBUixFQURBO0FBQUEsUyxDQUFBLEVBRDJCO0FBQUEsS0FBN0IsRUFHQUosTUFIQSxFO0NBREY7QUFNQSxJQUFPSyxJQUFBLEdBQVAsU0FBT0EsSUFBUCxDQUNHQyxJQURILEVBQ1FDLE1BRFIsRUFDZ0I7QUFBQSxxQkFDYkMsUUFEYSxFQUNKQyxRQURJLEVBRWQ7QUFBQSxlLGFBQ0U7QUFBQSxZQUFPRCxRQUFOLENBQUNILElBQUYsQ0FBZ0JJLFFBQWhCO0FBQUEsWUFDQSxPQUFVSCxJQUFULENBQUNJLE9BQUYsQ0FBZUgsTUFBZixFQURBO0FBQUEsUyxDQUFBLEVBREY7QUFBQSxLQUZjO0FBQUEsQ0FEaEIsQ0FOQTtBQWFBLElBQU9JLFNBQUEsR0FBUCxTQUFPQSxTQUFQLENBQ0dMLElBREgsRUFDUUMsTUFEUixFQUNnQjtBQUFBLHFCQUNiSyxRQURhLEVBQ0pDLEtBREksRUFFZDtBQUFBLGUsYUFDRTtBQUFBLFlBQU1DLE9BQUwsQ0FBQ0MsR0FBRixDQUFrQkYsS0FBSixHQUFxQkEsS0FBVixDQUFDRyxRQUFGLENBQWlCSixRQUFqQixDQUFWLEdBQXFDQyxLQUFuRDtBQUFBLFlBQ0EsT0FBVVAsSUFBVCxDQUFDSSxPQUFGLENBQWVILE1BQWYsRUFEQTtBQUFBLFMsQ0FBQSxFQURGO0FBQUEsS0FGYztBQUFBLENBRGhCLENBYkE7QUFvQkEsSUFBT1UsRUFBQSxHQUFQLFNBQU9BLEVBQVAsQ0FDR1gsSUFESCxFQUNTO0FBQUEscUJBQ05ZLFNBRE0sRUFDSUMsTUFESixFQUNXQyxPQURYLEVBRVA7QUFBQSxlQUFnQmQsSUFBZixDQUFDZSxhQUFGLENBQXFCLFVBQ2xCQyxRQURrQixFQUVuQjtBQUFBLG1CQUFLSCxNQUFKLENBQUNGLEVBQUYsQ0FBWUMsU0FBWixFQUFzQixVQUNuQkwsS0FEbUIsRUFFcEI7QUFBQSx1QkFBQ1MsUUFBRCxDQUFXRixPQUFELENBQVNQLEtBQVQsQ0FBVjtBQUFBLGFBRkY7QUFBQSxTQUZGO0FBQUEsS0FGTztBQUFBLENBRFQsQ0FwQkE7QUE2QkEsSUFBT1UsSUFBQSxHQUFQLFNBQU9BLElBQVAsQ0FDR0MsWUFESCxFQUNpQjtBQUFBLFcsWUFDZDtBQUFBLFlBQUFDLE0sR0FBUUMsR0FBQSxDQUFJQyxnQkFBTCxDQUF1QkgsWUFBdkIsQ0FBUDtBQUFBLFFBQ0EsSUFBQUksTyxHQUFRRixHQUFBLENBQUlHLGlCQUFMLENBQXVCTCxZQUF2QixDQUFQLENBREE7QUFBQSxRQUVBLElBQUFNLFEsSUFBZ0JGLE8sTUFBVCxDLFFBQUEsQ0FBUCxDQUZBO0FBQUEsUUFHRCxPLGFBQ0U7QUFBQSxZQUFDN0IsUUFBRCxDQUFVeUIsWUFBVixFLFFBQUEsRSxNQUFBLEUsU0FBQTtBQUFBLFlBQ0EsT0FBSUEsWUFBQSxDQUFhTywwQkFBakIsR0FDSVAsWUFBQSxDQUFhTywwQkFEakIsR0FFVVAsWUFBQSxDQUFhTywwQkFBbkIsR0FBOEM7QUFBQSxnQixNQUN2Q0MsRUFBRCxDQUFLZixFQUFELENBQUlRLE1BQUosQ0FBSixDQUR3QztBQUFBLGdCLFFBRXJDUSxFQUFELENBQUs1QixJQUFELENBQU1vQixNQUFOLEVBQVdLLFFBQVgsQ0FBSixDQUZzQztBQUFBLGdCLGFBR2hDRyxFQUFELENBQUt0QixTQUFELENBQVdjLE1BQVgsRUFBZ0JLLFFBQWhCLENBQUosQ0FIaUM7QUFBQSxhQUZsRCxDQURBO0FBQUEsUyxDQUFBLEVBREYsQ0FIQztBQUFBLEssS0FEYyxDLElBQUE7QUFBQSxDQURqQixDQTdCQTtBQTJDQy9CLFFBQUQsQ0FBVTJCLEdBQVYsRSxRQUFBLEUsTUFBQSxFLFNBQUEsRUEzQ0E7QUE0Q01BLEdBQUEsQ0FBSVEsd0JBQVYsR0FBbUNYLElBQW5DIiwic291cmNlc0NvbnRlbnQiOlsiKGRlZm4tIHNhbml0aXplIFtyZWNvcmQgJiBzcGFjZXNdXG4gIChzcGFjZXMucmVkdWNlIChmbiBbciBzcGFjZV0gKGRvXG4gICAgKGlmIChhZ2V0IHIgc3BhY2UpIG5pbCAoc2V0ISAoYWdldCByIHNwYWNlKSB7fSkpXG4gICAgKGFnZXQgciBzcGFjZSkpKVxuICByZWNvcmQpKVxuXG4oZGVmbi0gcGlwZVxuICBbVGFzayBUdXBsZTBdIChmblxuICBbcmVhZGFibGUgd3JpdGFibGVdXG4gIChkb1xuICAgICgucGlwZSByZWFkYWJsZSB3cml0YWJsZSlcbiAgICAoLnN1Y2NlZWQgVGFzayBUdXBsZTApKSkpXG5cbihkZWZuLSBsb2dCdWZmZXJcbiAgW1Rhc2sgVHVwbGUwXSAoZm5cbiAgW2VuY29kaW5nIGNodW5rXVxuICAoZG9cbiAgICAoLmxvZyBjb25zb2xlIChpZiBjaHVuayAoLnRvU3RyaW5nIGNodW5rIGVuY29kaW5nKSBjaHVuaykpXG4gICAgKC5zdWNjZWVkIFRhc2sgVHVwbGUwKSkpKVxuXG4oZGVmbi0gb25cbiAgW1Rhc2tdIChmblxuICBbZXZlbnROYW1lIHN0cmVhbSBhVG9UYXNrXVxuICAoLmFzeW5jRnVuY3Rpb24gVGFzayAoZm5cbiAgICBbY2FsbGJhY2tdXG4gICAgKC5vbiBzdHJlYW0gZXZlbnROYW1lIChmblxuICAgICAgW2NodW5rXVxuICAgICAgKGNhbGxiYWNrIChhVG9UYXNrIGNodW5rKSkpKSkpKSlcblxuKGRlZm4tIG1ha2VcbiAgW2xvY2FsUnVudGltZV0gKGxldFxuICBbVGFzayAgIChFbG0uTmF0aXZlLlRhc2subWFrZSAgbG9jYWxSdW50aW1lKVxuICAgVXRpbHMgIChFbG0uTmF0aXZlLlV0aWxzLm1ha2UgbG9jYWxSdW50aW1lKVxuICAgVHVwbGUwICg6VHVwbGUwIFV0aWxzKSBdXG4gIChkb1xuICAgIChzYW5pdGl6ZSBsb2NhbFJ1bnRpbWUgOk5hdGl2ZSA6Tm9kZSA6U3RyZWFtcylcbiAgICAoaWYgbG9jYWxSdW50aW1lLk5hdGl2ZS5Ob2RlLlN0cmVhbXMudmFsdWVzXG4gICAgICAgIGxvY2FsUnVudGltZS5OYXRpdmUuTm9kZS5TdHJlYW1zLnZhbHVlc1xuICAgICAgICAoc2V0ISBsb2NhbFJ1bnRpbWUuTmF0aXZlLk5vZGUuU3RyZWFtcy52YWx1ZXMge1xuICAgICAgICAgIDpvbiAoRjMgKG9uIFRhc2spKVxuICAgICAgICAgIDpwaXBlIChGMiAocGlwZSBUYXNrIFR1cGxlMCkpXG4gICAgICAgICAgOmxvZ0J1ZmZlciAoRjIgKGxvZ0J1ZmZlciBUYXNrIFR1cGxlMCkpIH0pKSkpKVxuXG4oc2FuaXRpemUgRWxtIDpOYXRpdmUgOk5vZGUgOlN0cmVhbXMpXG4oc2V0ISBFbG0uTmF0aXZlLk5vZGUuU3RyZWFtcy5tYWtlIG1ha2UpXG4iXX0=
